
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Endereco
 * 
 */
export type Endereco = $Result.DefaultSelection<Prisma.$EnderecoPayload>
/**
 * Model Vendedor
 * 
 */
export type Vendedor = $Result.DefaultSelection<Prisma.$VendedorPayload>
/**
 * Model Comprador
 * 
 */
export type Comprador = $Result.DefaultSelection<Prisma.$CompradorPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Carrinho
 * 
 */
export type Carrinho = $Result.DefaultSelection<Prisma.$CarrinhoPayload>
/**
 * Model ProdutoNoCarrinho
 * 
 */
export type ProdutoNoCarrinho = $Result.DefaultSelection<Prisma.$ProdutoNoCarrinhoPayload>
/**
 * Model Compra
 * 
 */
export type Compra = $Result.DefaultSelection<Prisma.$CompraPayload>
/**
 * Model Mensagem
 * 
 */
export type Mensagem = $Result.DefaultSelection<Prisma.$MensagemPayload>
/**
 * Model ProdutoFavorito
 * 
 */
export type ProdutoFavorito = $Result.DefaultSelection<Prisma.$ProdutoFavoritoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.endereco`: Exposes CRUD operations for the **Endereco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enderecos
    * const enderecos = await prisma.endereco.findMany()
    * ```
    */
  get endereco(): Prisma.EnderecoDelegate<ExtArgs>;

  /**
   * `prisma.vendedor`: Exposes CRUD operations for the **Vendedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendedors
    * const vendedors = await prisma.vendedor.findMany()
    * ```
    */
  get vendedor(): Prisma.VendedorDelegate<ExtArgs>;

  /**
   * `prisma.comprador`: Exposes CRUD operations for the **Comprador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compradors
    * const compradors = await prisma.comprador.findMany()
    * ```
    */
  get comprador(): Prisma.CompradorDelegate<ExtArgs>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.carrinho`: Exposes CRUD operations for the **Carrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carrinhos
    * const carrinhos = await prisma.carrinho.findMany()
    * ```
    */
  get carrinho(): Prisma.CarrinhoDelegate<ExtArgs>;

  /**
   * `prisma.produtoNoCarrinho`: Exposes CRUD operations for the **ProdutoNoCarrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutoNoCarrinhos
    * const produtoNoCarrinhos = await prisma.produtoNoCarrinho.findMany()
    * ```
    */
  get produtoNoCarrinho(): Prisma.ProdutoNoCarrinhoDelegate<ExtArgs>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **Compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.CompraDelegate<ExtArgs>;

  /**
   * `prisma.mensagem`: Exposes CRUD operations for the **Mensagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensagems
    * const mensagems = await prisma.mensagem.findMany()
    * ```
    */
  get mensagem(): Prisma.MensagemDelegate<ExtArgs>;

  /**
   * `prisma.produtoFavorito`: Exposes CRUD operations for the **ProdutoFavorito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutoFavoritos
    * const produtoFavoritos = await prisma.produtoFavorito.findMany()
    * ```
    */
  get produtoFavorito(): Prisma.ProdutoFavoritoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Endereco: 'Endereco',
    Vendedor: 'Vendedor',
    Comprador: 'Comprador',
    Produto: 'Produto',
    Categoria: 'Categoria',
    Carrinho: 'Carrinho',
    ProdutoNoCarrinho: 'ProdutoNoCarrinho',
    Compra: 'Compra',
    Mensagem: 'Mensagem',
    ProdutoFavorito: 'ProdutoFavorito'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "endereco" | "vendedor" | "comprador" | "produto" | "categoria" | "carrinho" | "produtoNoCarrinho" | "compra" | "mensagem" | "produtoFavorito"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Endereco: {
        payload: Prisma.$EnderecoPayload<ExtArgs>
        fields: Prisma.EnderecoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnderecoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnderecoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>
          }
          findFirst: {
            args: Prisma.EnderecoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnderecoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>
          }
          findMany: {
            args: Prisma.EnderecoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>[]
          }
          create: {
            args: Prisma.EnderecoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>
          }
          createMany: {
            args: Prisma.EnderecoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnderecoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>[]
          }
          delete: {
            args: Prisma.EnderecoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>
          }
          update: {
            args: Prisma.EnderecoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>
          }
          deleteMany: {
            args: Prisma.EnderecoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnderecoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnderecoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnderecoPayload>
          }
          aggregate: {
            args: Prisma.EnderecoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEndereco>
          }
          groupBy: {
            args: Prisma.EnderecoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnderecoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnderecoCountArgs<ExtArgs>
            result: $Utils.Optional<EnderecoCountAggregateOutputType> | number
          }
        }
      }
      Vendedor: {
        payload: Prisma.$VendedorPayload<ExtArgs>
        fields: Prisma.VendedorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendedorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendedorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>
          }
          findFirst: {
            args: Prisma.VendedorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendedorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>
          }
          findMany: {
            args: Prisma.VendedorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>[]
          }
          create: {
            args: Prisma.VendedorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>
          }
          createMany: {
            args: Prisma.VendedorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendedorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>[]
          }
          delete: {
            args: Prisma.VendedorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>
          }
          update: {
            args: Prisma.VendedorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>
          }
          deleteMany: {
            args: Prisma.VendedorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendedorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendedorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendedorPayload>
          }
          aggregate: {
            args: Prisma.VendedorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendedor>
          }
          groupBy: {
            args: Prisma.VendedorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendedorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendedorCountArgs<ExtArgs>
            result: $Utils.Optional<VendedorCountAggregateOutputType> | number
          }
        }
      }
      Comprador: {
        payload: Prisma.$CompradorPayload<ExtArgs>
        fields: Prisma.CompradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompradorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompradorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>
          }
          findFirst: {
            args: Prisma.CompradorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompradorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>
          }
          findMany: {
            args: Prisma.CompradorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>[]
          }
          create: {
            args: Prisma.CompradorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>
          }
          createMany: {
            args: Prisma.CompradorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompradorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>[]
          }
          delete: {
            args: Prisma.CompradorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>
          }
          update: {
            args: Prisma.CompradorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>
          }
          deleteMany: {
            args: Prisma.CompradorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompradorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompradorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompradorPayload>
          }
          aggregate: {
            args: Prisma.CompradorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComprador>
          }
          groupBy: {
            args: Prisma.CompradorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompradorCountArgs<ExtArgs>
            result: $Utils.Optional<CompradorCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProdutoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Carrinho: {
        payload: Prisma.$CarrinhoPayload<ExtArgs>
        fields: Prisma.CarrinhoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarrinhoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarrinhoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          findFirst: {
            args: Prisma.CarrinhoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarrinhoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          findMany: {
            args: Prisma.CarrinhoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>[]
          }
          create: {
            args: Prisma.CarrinhoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          createMany: {
            args: Prisma.CarrinhoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarrinhoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>[]
          }
          delete: {
            args: Prisma.CarrinhoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          update: {
            args: Prisma.CarrinhoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          deleteMany: {
            args: Prisma.CarrinhoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarrinhoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CarrinhoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          aggregate: {
            args: Prisma.CarrinhoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarrinho>
          }
          groupBy: {
            args: Prisma.CarrinhoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarrinhoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarrinhoCountArgs<ExtArgs>
            result: $Utils.Optional<CarrinhoCountAggregateOutputType> | number
          }
        }
      }
      ProdutoNoCarrinho: {
        payload: Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>
        fields: Prisma.ProdutoNoCarrinhoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoNoCarrinhoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoNoCarrinhoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoNoCarrinhoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoNoCarrinhoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>
          }
          findMany: {
            args: Prisma.ProdutoNoCarrinhoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>[]
          }
          create: {
            args: Prisma.ProdutoNoCarrinhoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>
          }
          createMany: {
            args: Prisma.ProdutoNoCarrinhoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProdutoNoCarrinhoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>[]
          }
          delete: {
            args: Prisma.ProdutoNoCarrinhoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>
          }
          update: {
            args: Prisma.ProdutoNoCarrinhoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoNoCarrinhoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoNoCarrinhoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoNoCarrinhoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoNoCarrinhoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoNoCarrinhoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutoNoCarrinho>
          }
          groupBy: {
            args: Prisma.ProdutoNoCarrinhoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoNoCarrinhoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoNoCarrinhoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoNoCarrinhoCountAggregateOutputType> | number
          }
        }
      }
      Compra: {
        payload: Prisma.$CompraPayload<ExtArgs>
        fields: Prisma.CompraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          findFirst: {
            args: Prisma.CompraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          findMany: {
            args: Prisma.CompraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>[]
          }
          create: {
            args: Prisma.CompraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          createMany: {
            args: Prisma.CompraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>[]
          }
          delete: {
            args: Prisma.CompraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          update: {
            args: Prisma.CompraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          deleteMany: {
            args: Prisma.CompraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompraPayload>
          }
          aggregate: {
            args: Prisma.CompraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompra>
          }
          groupBy: {
            args: Prisma.CompraGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompraGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompraCountArgs<ExtArgs>
            result: $Utils.Optional<CompraCountAggregateOutputType> | number
          }
        }
      }
      Mensagem: {
        payload: Prisma.$MensagemPayload<ExtArgs>
        fields: Prisma.MensagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MensagemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MensagemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          findFirst: {
            args: Prisma.MensagemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MensagemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          findMany: {
            args: Prisma.MensagemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>[]
          }
          create: {
            args: Prisma.MensagemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          createMany: {
            args: Prisma.MensagemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MensagemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>[]
          }
          delete: {
            args: Prisma.MensagemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          update: {
            args: Prisma.MensagemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          deleteMany: {
            args: Prisma.MensagemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MensagemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MensagemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          aggregate: {
            args: Prisma.MensagemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMensagem>
          }
          groupBy: {
            args: Prisma.MensagemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MensagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MensagemCountArgs<ExtArgs>
            result: $Utils.Optional<MensagemCountAggregateOutputType> | number
          }
        }
      }
      ProdutoFavorito: {
        payload: Prisma.$ProdutoFavoritoPayload<ExtArgs>
        fields: Prisma.ProdutoFavoritoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFavoritoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFavoritoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFavoritoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFavoritoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFavoritoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>[]
          }
          create: {
            args: Prisma.ProdutoFavoritoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>
          }
          createMany: {
            args: Prisma.ProdutoFavoritoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProdutoFavoritoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>[]
          }
          delete: {
            args: Prisma.ProdutoFavoritoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>
          }
          update: {
            args: Prisma.ProdutoFavoritoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoFavoritoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoFavoritoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoFavoritoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoFavoritoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoFavoritoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutoFavorito>
          }
          groupBy: {
            args: Prisma.ProdutoFavoritoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoFavoritoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoFavoritoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoFavoritoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    mensagensEnviadas: number
    mensagensRecebidas: number
    favoritos: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensagensEnviadas?: boolean | UsuarioCountOutputTypeCountMensagensEnviadasArgs
    mensagensRecebidas?: boolean | UsuarioCountOutputTypeCountMensagensRecebidasArgs
    favoritos?: boolean | UsuarioCountOutputTypeCountFavoritosArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountMensagensEnviadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountMensagensRecebidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountFavoritosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoFavoritoWhereInput
  }


  /**
   * Count Type VendedorCountOutputType
   */

  export type VendedorCountOutputType = {
    produtos: number
  }

  export type VendedorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | VendedorCountOutputTypeCountProdutosArgs
  }

  // Custom InputTypes
  /**
   * VendedorCountOutputType without action
   */
  export type VendedorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendedorCountOutputType
     */
    select?: VendedorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendedorCountOutputType without action
   */
  export type VendedorCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
  }


  /**
   * Count Type CompradorCountOutputType
   */

  export type CompradorCountOutputType = {
    compras: number
  }

  export type CompradorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    compras?: boolean | CompradorCountOutputTypeCountComprasArgs
  }

  // Custom InputTypes
  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompradorCountOutputType
     */
    select?: CompradorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeCountComprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraWhereInput
  }


  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    carrinhos: number
    favoritos: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrinhos?: boolean | ProdutoCountOutputTypeCountCarrinhosArgs
    favoritos?: boolean | ProdutoCountOutputTypeCountFavoritosArgs
  }

  // Custom InputTypes
  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountCarrinhosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoNoCarrinhoWhereInput
  }

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountFavoritosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoFavoritoWhereInput
  }


  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    produtos: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | CategoriaCountOutputTypeCountProdutosArgs
  }

  // Custom InputTypes
  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
  }


  /**
   * Count Type CarrinhoCountOutputType
   */

  export type CarrinhoCountOutputType = {
    produtos: number
    compras: number
  }

  export type CarrinhoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | CarrinhoCountOutputTypeCountProdutosArgs
    compras?: boolean | CarrinhoCountOutputTypeCountComprasArgs
  }

  // Custom InputTypes
  /**
   * CarrinhoCountOutputType without action
   */
  export type CarrinhoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarrinhoCountOutputType
     */
    select?: CarrinhoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarrinhoCountOutputType without action
   */
  export type CarrinhoCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoNoCarrinhoWhereInput
  }

  /**
   * CarrinhoCountOutputType without action
   */
  export type CarrinhoCountOutputTypeCountComprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    primeiroNome: string | null
    sobrenome: string | null
    email: string | null
    senha: string | null
    telefone: string | null
    imagemPerfil: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    primeiroNome: string | null
    sobrenome: string | null
    email: string | null
    senha: string | null
    telefone: string | null
    imagemPerfil: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    cpf: number
    primeiroNome: number
    sobrenome: number
    email: number
    senha: number
    telefone: number
    imagemPerfil: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    cpf?: true
    primeiroNome?: true
    sobrenome?: true
    email?: true
    senha?: true
    telefone?: true
    imagemPerfil?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    cpf?: true
    primeiroNome?: true
    sobrenome?: true
    email?: true
    senha?: true
    telefone?: true
    imagemPerfil?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    cpf?: true
    primeiroNome?: true
    sobrenome?: true
    email?: true
    senha?: true
    telefone?: true
    imagemPerfil?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone: string | null
    imagemPerfil: string | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    primeiroNome?: boolean
    sobrenome?: boolean
    email?: boolean
    senha?: boolean
    telefone?: boolean
    imagemPerfil?: boolean
    endereco?: boolean | Usuario$enderecoArgs<ExtArgs>
    vendedor?: boolean | Usuario$vendedorArgs<ExtArgs>
    comprador?: boolean | Usuario$compradorArgs<ExtArgs>
    mensagensEnviadas?: boolean | Usuario$mensagensEnviadasArgs<ExtArgs>
    mensagensRecebidas?: boolean | Usuario$mensagensRecebidasArgs<ExtArgs>
    favoritos?: boolean | Usuario$favoritosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    primeiroNome?: boolean
    sobrenome?: boolean
    email?: boolean
    senha?: boolean
    telefone?: boolean
    imagemPerfil?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    cpf?: boolean
    primeiroNome?: boolean
    sobrenome?: boolean
    email?: boolean
    senha?: boolean
    telefone?: boolean
    imagemPerfil?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    endereco?: boolean | Usuario$enderecoArgs<ExtArgs>
    vendedor?: boolean | Usuario$vendedorArgs<ExtArgs>
    comprador?: boolean | Usuario$compradorArgs<ExtArgs>
    mensagensEnviadas?: boolean | Usuario$mensagensEnviadasArgs<ExtArgs>
    mensagensRecebidas?: boolean | Usuario$mensagensRecebidasArgs<ExtArgs>
    favoritos?: boolean | Usuario$favoritosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      endereco: Prisma.$EnderecoPayload<ExtArgs> | null
      vendedor: Prisma.$VendedorPayload<ExtArgs> | null
      comprador: Prisma.$CompradorPayload<ExtArgs> | null
      mensagensEnviadas: Prisma.$MensagemPayload<ExtArgs>[]
      mensagensRecebidas: Prisma.$MensagemPayload<ExtArgs>[]
      favoritos: Prisma.$ProdutoFavoritoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cpf: string
      primeiroNome: string
      sobrenome: string
      email: string
      senha: string
      telefone: string | null
      imagemPerfil: string | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    endereco<T extends Usuario$enderecoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$enderecoArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    vendedor<T extends Usuario$vendedorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$vendedorArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    comprador<T extends Usuario$compradorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$compradorArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    mensagensEnviadas<T extends Usuario$mensagensEnviadasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$mensagensEnviadasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findMany"> | Null>
    mensagensRecebidas<T extends Usuario$mensagensRecebidasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$mensagensRecebidasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findMany"> | Null>
    favoritos<T extends Usuario$favoritosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$favoritosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly cpf: FieldRef<"Usuario", 'String'>
    readonly primeiroNome: FieldRef<"Usuario", 'String'>
    readonly sobrenome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly telefone: FieldRef<"Usuario", 'String'>
    readonly imagemPerfil: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.endereco
   */
  export type Usuario$enderecoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    where?: EnderecoWhereInput
  }

  /**
   * Usuario.vendedor
   */
  export type Usuario$vendedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    where?: VendedorWhereInput
  }

  /**
   * Usuario.comprador
   */
  export type Usuario$compradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    where?: CompradorWhereInput
  }

  /**
   * Usuario.mensagensEnviadas
   */
  export type Usuario$mensagensEnviadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    where?: MensagemWhereInput
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    cursor?: MensagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Usuario.mensagensRecebidas
   */
  export type Usuario$mensagensRecebidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    where?: MensagemWhereInput
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    cursor?: MensagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Usuario.favoritos
   */
  export type Usuario$favoritosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    where?: ProdutoFavoritoWhereInput
    orderBy?: ProdutoFavoritoOrderByWithRelationInput | ProdutoFavoritoOrderByWithRelationInput[]
    cursor?: ProdutoFavoritoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoFavoritoScalarFieldEnum | ProdutoFavoritoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Endereco
   */

  export type AggregateEndereco = {
    _count: EnderecoCountAggregateOutputType | null
    _avg: EnderecoAvgAggregateOutputType | null
    _sum: EnderecoSumAggregateOutputType | null
    _min: EnderecoMinAggregateOutputType | null
    _max: EnderecoMaxAggregateOutputType | null
  }

  export type EnderecoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type EnderecoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type EnderecoMinAggregateOutputType = {
    id: number | null
    cep: string | null
    logradouro: string | null
    numero: string | null
    complemento: string | null
    bairro: string | null
    cidade: string | null
    estado: string | null
    usuarioId: number | null
  }

  export type EnderecoMaxAggregateOutputType = {
    id: number | null
    cep: string | null
    logradouro: string | null
    numero: string | null
    complemento: string | null
    bairro: string | null
    cidade: string | null
    estado: string | null
    usuarioId: number | null
  }

  export type EnderecoCountAggregateOutputType = {
    id: number
    cep: number
    logradouro: number
    numero: number
    complemento: number
    bairro: number
    cidade: number
    estado: number
    usuarioId: number
    _all: number
  }


  export type EnderecoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type EnderecoSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type EnderecoMinAggregateInputType = {
    id?: true
    cep?: true
    logradouro?: true
    numero?: true
    complemento?: true
    bairro?: true
    cidade?: true
    estado?: true
    usuarioId?: true
  }

  export type EnderecoMaxAggregateInputType = {
    id?: true
    cep?: true
    logradouro?: true
    numero?: true
    complemento?: true
    bairro?: true
    cidade?: true
    estado?: true
    usuarioId?: true
  }

  export type EnderecoCountAggregateInputType = {
    id?: true
    cep?: true
    logradouro?: true
    numero?: true
    complemento?: true
    bairro?: true
    cidade?: true
    estado?: true
    usuarioId?: true
    _all?: true
  }

  export type EnderecoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Endereco to aggregate.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: EnderecoOrderByWithRelationInput | EnderecoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enderecos
    **/
    _count?: true | EnderecoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnderecoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnderecoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnderecoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnderecoMaxAggregateInputType
  }

  export type GetEnderecoAggregateType<T extends EnderecoAggregateArgs> = {
        [P in keyof T & keyof AggregateEndereco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndereco[P]>
      : GetScalarType<T[P], AggregateEndereco[P]>
  }




  export type EnderecoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnderecoWhereInput
    orderBy?: EnderecoOrderByWithAggregationInput | EnderecoOrderByWithAggregationInput[]
    by: EnderecoScalarFieldEnum[] | EnderecoScalarFieldEnum
    having?: EnderecoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnderecoCountAggregateInputType | true
    _avg?: EnderecoAvgAggregateInputType
    _sum?: EnderecoSumAggregateInputType
    _min?: EnderecoMinAggregateInputType
    _max?: EnderecoMaxAggregateInputType
  }

  export type EnderecoGroupByOutputType = {
    id: number
    cep: string
    logradouro: string
    numero: string
    complemento: string | null
    bairro: string
    cidade: string
    estado: string
    usuarioId: number
    _count: EnderecoCountAggregateOutputType | null
    _avg: EnderecoAvgAggregateOutputType | null
    _sum: EnderecoSumAggregateOutputType | null
    _min: EnderecoMinAggregateOutputType | null
    _max: EnderecoMaxAggregateOutputType | null
  }

  type GetEnderecoGroupByPayload<T extends EnderecoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnderecoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnderecoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnderecoGroupByOutputType[P]>
            : GetScalarType<T[P], EnderecoGroupByOutputType[P]>
        }
      >
    >


  export type EnderecoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cep?: boolean
    logradouro?: boolean
    numero?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["endereco"]>

  export type EnderecoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cep?: boolean
    logradouro?: boolean
    numero?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["endereco"]>

  export type EnderecoSelectScalar = {
    id?: boolean
    cep?: boolean
    logradouro?: boolean
    numero?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    usuarioId?: boolean
  }

  export type EnderecoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type EnderecoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $EnderecoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Endereco"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cep: string
      logradouro: string
      numero: string
      complemento: string | null
      bairro: string
      cidade: string
      estado: string
      usuarioId: number
    }, ExtArgs["result"]["endereco"]>
    composites: {}
  }

  type EnderecoGetPayload<S extends boolean | null | undefined | EnderecoDefaultArgs> = $Result.GetResult<Prisma.$EnderecoPayload, S>

  type EnderecoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnderecoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnderecoCountAggregateInputType | true
    }

  export interface EnderecoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Endereco'], meta: { name: 'Endereco' } }
    /**
     * Find zero or one Endereco that matches the filter.
     * @param {EnderecoFindUniqueArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnderecoFindUniqueArgs>(args: SelectSubset<T, EnderecoFindUniqueArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Endereco that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnderecoFindUniqueOrThrowArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnderecoFindUniqueOrThrowArgs>(args: SelectSubset<T, EnderecoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Endereco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindFirstArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnderecoFindFirstArgs>(args?: SelectSubset<T, EnderecoFindFirstArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Endereco that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindFirstOrThrowArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnderecoFindFirstOrThrowArgs>(args?: SelectSubset<T, EnderecoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enderecos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enderecos
     * const enderecos = await prisma.endereco.findMany()
     * 
     * // Get first 10 Enderecos
     * const enderecos = await prisma.endereco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enderecoWithIdOnly = await prisma.endereco.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnderecoFindManyArgs>(args?: SelectSubset<T, EnderecoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Endereco.
     * @param {EnderecoCreateArgs} args - Arguments to create a Endereco.
     * @example
     * // Create one Endereco
     * const Endereco = await prisma.endereco.create({
     *   data: {
     *     // ... data to create a Endereco
     *   }
     * })
     * 
     */
    create<T extends EnderecoCreateArgs>(args: SelectSubset<T, EnderecoCreateArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enderecos.
     * @param {EnderecoCreateManyArgs} args - Arguments to create many Enderecos.
     * @example
     * // Create many Enderecos
     * const endereco = await prisma.endereco.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnderecoCreateManyArgs>(args?: SelectSubset<T, EnderecoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enderecos and returns the data saved in the database.
     * @param {EnderecoCreateManyAndReturnArgs} args - Arguments to create many Enderecos.
     * @example
     * // Create many Enderecos
     * const endereco = await prisma.endereco.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enderecos and only return the `id`
     * const enderecoWithIdOnly = await prisma.endereco.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnderecoCreateManyAndReturnArgs>(args?: SelectSubset<T, EnderecoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Endereco.
     * @param {EnderecoDeleteArgs} args - Arguments to delete one Endereco.
     * @example
     * // Delete one Endereco
     * const Endereco = await prisma.endereco.delete({
     *   where: {
     *     // ... filter to delete one Endereco
     *   }
     * })
     * 
     */
    delete<T extends EnderecoDeleteArgs>(args: SelectSubset<T, EnderecoDeleteArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Endereco.
     * @param {EnderecoUpdateArgs} args - Arguments to update one Endereco.
     * @example
     * // Update one Endereco
     * const endereco = await prisma.endereco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnderecoUpdateArgs>(args: SelectSubset<T, EnderecoUpdateArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enderecos.
     * @param {EnderecoDeleteManyArgs} args - Arguments to filter Enderecos to delete.
     * @example
     * // Delete a few Enderecos
     * const { count } = await prisma.endereco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnderecoDeleteManyArgs>(args?: SelectSubset<T, EnderecoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enderecos
     * const endereco = await prisma.endereco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnderecoUpdateManyArgs>(args: SelectSubset<T, EnderecoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endereco.
     * @param {EnderecoUpsertArgs} args - Arguments to update or create a Endereco.
     * @example
     * // Update or create a Endereco
     * const endereco = await prisma.endereco.upsert({
     *   create: {
     *     // ... data to create a Endereco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endereco we want to update
     *   }
     * })
     */
    upsert<T extends EnderecoUpsertArgs>(args: SelectSubset<T, EnderecoUpsertArgs<ExtArgs>>): Prisma__EnderecoClient<$Result.GetResult<Prisma.$EnderecoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoCountArgs} args - Arguments to filter Enderecos to count.
     * @example
     * // Count the number of Enderecos
     * const count = await prisma.endereco.count({
     *   where: {
     *     // ... the filter for the Enderecos we want to count
     *   }
     * })
    **/
    count<T extends EnderecoCountArgs>(
      args?: Subset<T, EnderecoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnderecoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endereco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnderecoAggregateArgs>(args: Subset<T, EnderecoAggregateArgs>): Prisma.PrismaPromise<GetEnderecoAggregateType<T>>

    /**
     * Group by Endereco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnderecoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnderecoGroupByArgs['orderBy'] }
        : { orderBy?: EnderecoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnderecoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnderecoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Endereco model
   */
  readonly fields: EnderecoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Endereco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnderecoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Endereco model
   */ 
  interface EnderecoFieldRefs {
    readonly id: FieldRef<"Endereco", 'Int'>
    readonly cep: FieldRef<"Endereco", 'String'>
    readonly logradouro: FieldRef<"Endereco", 'String'>
    readonly numero: FieldRef<"Endereco", 'String'>
    readonly complemento: FieldRef<"Endereco", 'String'>
    readonly bairro: FieldRef<"Endereco", 'String'>
    readonly cidade: FieldRef<"Endereco", 'String'>
    readonly estado: FieldRef<"Endereco", 'String'>
    readonly usuarioId: FieldRef<"Endereco", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Endereco findUnique
   */
  export type EnderecoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where: EnderecoWhereUniqueInput
  }

  /**
   * Endereco findUniqueOrThrow
   */
  export type EnderecoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where: EnderecoWhereUniqueInput
  }

  /**
   * Endereco findFirst
   */
  export type EnderecoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: EnderecoOrderByWithRelationInput | EnderecoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enderecos.
     */
    distinct?: EnderecoScalarFieldEnum | EnderecoScalarFieldEnum[]
  }

  /**
   * Endereco findFirstOrThrow
   */
  export type EnderecoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: EnderecoOrderByWithRelationInput | EnderecoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enderecos.
     */
    distinct?: EnderecoScalarFieldEnum | EnderecoScalarFieldEnum[]
  }

  /**
   * Endereco findMany
   */
  export type EnderecoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Enderecos to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: EnderecoOrderByWithRelationInput | EnderecoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    distinct?: EnderecoScalarFieldEnum | EnderecoScalarFieldEnum[]
  }

  /**
   * Endereco create
   */
  export type EnderecoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * The data needed to create a Endereco.
     */
    data: XOR<EnderecoCreateInput, EnderecoUncheckedCreateInput>
  }

  /**
   * Endereco createMany
   */
  export type EnderecoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enderecos.
     */
    data: EnderecoCreateManyInput | EnderecoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Endereco createManyAndReturn
   */
  export type EnderecoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Enderecos.
     */
    data: EnderecoCreateManyInput | EnderecoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Endereco update
   */
  export type EnderecoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * The data needed to update a Endereco.
     */
    data: XOR<EnderecoUpdateInput, EnderecoUncheckedUpdateInput>
    /**
     * Choose, which Endereco to update.
     */
    where: EnderecoWhereUniqueInput
  }

  /**
   * Endereco updateMany
   */
  export type EnderecoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enderecos.
     */
    data: XOR<EnderecoUpdateManyMutationInput, EnderecoUncheckedUpdateManyInput>
    /**
     * Filter which Enderecos to update
     */
    where?: EnderecoWhereInput
  }

  /**
   * Endereco upsert
   */
  export type EnderecoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * The filter to search for the Endereco to update in case it exists.
     */
    where: EnderecoWhereUniqueInput
    /**
     * In case the Endereco found by the `where` argument doesn't exist, create a new Endereco with this data.
     */
    create: XOR<EnderecoCreateInput, EnderecoUncheckedCreateInput>
    /**
     * In case the Endereco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnderecoUpdateInput, EnderecoUncheckedUpdateInput>
  }

  /**
   * Endereco delete
   */
  export type EnderecoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter which Endereco to delete.
     */
    where: EnderecoWhereUniqueInput
  }

  /**
   * Endereco deleteMany
   */
  export type EnderecoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enderecos to delete
     */
    where?: EnderecoWhereInput
  }

  /**
   * Endereco without action
   */
  export type EnderecoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnderecoInclude<ExtArgs> | null
  }


  /**
   * Model Vendedor
   */

  export type AggregateVendedor = {
    _count: VendedorCountAggregateOutputType | null
    _avg: VendedorAvgAggregateOutputType | null
    _sum: VendedorSumAggregateOutputType | null
    _min: VendedorMinAggregateOutputType | null
    _max: VendedorMaxAggregateOutputType | null
  }

  export type VendedorAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type VendedorSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type VendedorMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type VendedorMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type VendedorCountAggregateOutputType = {
    id: number
    usuarioId: number
    _all: number
  }


  export type VendedorAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type VendedorSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type VendedorMinAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type VendedorMaxAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type VendedorCountAggregateInputType = {
    id?: true
    usuarioId?: true
    _all?: true
  }

  export type VendedorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendedor to aggregate.
     */
    where?: VendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendedors to fetch.
     */
    orderBy?: VendedorOrderByWithRelationInput | VendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendedors
    **/
    _count?: true | VendedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendedorMaxAggregateInputType
  }

  export type GetVendedorAggregateType<T extends VendedorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendedor[P]>
      : GetScalarType<T[P], AggregateVendedor[P]>
  }




  export type VendedorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendedorWhereInput
    orderBy?: VendedorOrderByWithAggregationInput | VendedorOrderByWithAggregationInput[]
    by: VendedorScalarFieldEnum[] | VendedorScalarFieldEnum
    having?: VendedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendedorCountAggregateInputType | true
    _avg?: VendedorAvgAggregateInputType
    _sum?: VendedorSumAggregateInputType
    _min?: VendedorMinAggregateInputType
    _max?: VendedorMaxAggregateInputType
  }

  export type VendedorGroupByOutputType = {
    id: number
    usuarioId: number
    _count: VendedorCountAggregateOutputType | null
    _avg: VendedorAvgAggregateOutputType | null
    _sum: VendedorSumAggregateOutputType | null
    _min: VendedorMinAggregateOutputType | null
    _max: VendedorMaxAggregateOutputType | null
  }

  type GetVendedorGroupByPayload<T extends VendedorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendedorGroupByOutputType[P]>
            : GetScalarType<T[P], VendedorGroupByOutputType[P]>
        }
      >
    >


  export type VendedorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    produtos?: boolean | Vendedor$produtosArgs<ExtArgs>
    _count?: boolean | VendedorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendedor"]>

  export type VendedorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendedor"]>

  export type VendedorSelectScalar = {
    id?: boolean
    usuarioId?: boolean
  }

  export type VendedorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    produtos?: boolean | Vendedor$produtosArgs<ExtArgs>
    _count?: boolean | VendedorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendedorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $VendedorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendedor"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      produtos: Prisma.$ProdutoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
    }, ExtArgs["result"]["vendedor"]>
    composites: {}
  }

  type VendedorGetPayload<S extends boolean | null | undefined | VendedorDefaultArgs> = $Result.GetResult<Prisma.$VendedorPayload, S>

  type VendedorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VendedorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VendedorCountAggregateInputType | true
    }

  export interface VendedorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendedor'], meta: { name: 'Vendedor' } }
    /**
     * Find zero or one Vendedor that matches the filter.
     * @param {VendedorFindUniqueArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendedorFindUniqueArgs>(args: SelectSubset<T, VendedorFindUniqueArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vendedor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VendedorFindUniqueOrThrowArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendedorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendedorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vendedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorFindFirstArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendedorFindFirstArgs>(args?: SelectSubset<T, VendedorFindFirstArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vendedor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorFindFirstOrThrowArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendedorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendedorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vendedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendedors
     * const vendedors = await prisma.vendedor.findMany()
     * 
     * // Get first 10 Vendedors
     * const vendedors = await prisma.vendedor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendedorWithIdOnly = await prisma.vendedor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendedorFindManyArgs>(args?: SelectSubset<T, VendedorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vendedor.
     * @param {VendedorCreateArgs} args - Arguments to create a Vendedor.
     * @example
     * // Create one Vendedor
     * const Vendedor = await prisma.vendedor.create({
     *   data: {
     *     // ... data to create a Vendedor
     *   }
     * })
     * 
     */
    create<T extends VendedorCreateArgs>(args: SelectSubset<T, VendedorCreateArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vendedors.
     * @param {VendedorCreateManyArgs} args - Arguments to create many Vendedors.
     * @example
     * // Create many Vendedors
     * const vendedor = await prisma.vendedor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendedorCreateManyArgs>(args?: SelectSubset<T, VendedorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendedors and returns the data saved in the database.
     * @param {VendedorCreateManyAndReturnArgs} args - Arguments to create many Vendedors.
     * @example
     * // Create many Vendedors
     * const vendedor = await prisma.vendedor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendedors and only return the `id`
     * const vendedorWithIdOnly = await prisma.vendedor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendedorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendedorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vendedor.
     * @param {VendedorDeleteArgs} args - Arguments to delete one Vendedor.
     * @example
     * // Delete one Vendedor
     * const Vendedor = await prisma.vendedor.delete({
     *   where: {
     *     // ... filter to delete one Vendedor
     *   }
     * })
     * 
     */
    delete<T extends VendedorDeleteArgs>(args: SelectSubset<T, VendedorDeleteArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vendedor.
     * @param {VendedorUpdateArgs} args - Arguments to update one Vendedor.
     * @example
     * // Update one Vendedor
     * const vendedor = await prisma.vendedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendedorUpdateArgs>(args: SelectSubset<T, VendedorUpdateArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vendedors.
     * @param {VendedorDeleteManyArgs} args - Arguments to filter Vendedors to delete.
     * @example
     * // Delete a few Vendedors
     * const { count } = await prisma.vendedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendedorDeleteManyArgs>(args?: SelectSubset<T, VendedorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendedors
     * const vendedor = await prisma.vendedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendedorUpdateManyArgs>(args: SelectSubset<T, VendedorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendedor.
     * @param {VendedorUpsertArgs} args - Arguments to update or create a Vendedor.
     * @example
     * // Update or create a Vendedor
     * const vendedor = await prisma.vendedor.upsert({
     *   create: {
     *     // ... data to create a Vendedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendedor we want to update
     *   }
     * })
     */
    upsert<T extends VendedorUpsertArgs>(args: SelectSubset<T, VendedorUpsertArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vendedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorCountArgs} args - Arguments to filter Vendedors to count.
     * @example
     * // Count the number of Vendedors
     * const count = await prisma.vendedor.count({
     *   where: {
     *     // ... the filter for the Vendedors we want to count
     *   }
     * })
    **/
    count<T extends VendedorCountArgs>(
      args?: Subset<T, VendedorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendedorAggregateArgs>(args: Subset<T, VendedorAggregateArgs>): Prisma.PrismaPromise<GetVendedorAggregateType<T>>

    /**
     * Group by Vendedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendedorGroupByArgs['orderBy'] }
        : { orderBy?: VendedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendedorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendedor model
   */
  readonly fields: VendedorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendedorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produtos<T extends Vendedor$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Vendedor$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendedor model
   */ 
  interface VendedorFieldRefs {
    readonly id: FieldRef<"Vendedor", 'Int'>
    readonly usuarioId: FieldRef<"Vendedor", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Vendedor findUnique
   */
  export type VendedorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * Filter, which Vendedor to fetch.
     */
    where: VendedorWhereUniqueInput
  }

  /**
   * Vendedor findUniqueOrThrow
   */
  export type VendedorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * Filter, which Vendedor to fetch.
     */
    where: VendedorWhereUniqueInput
  }

  /**
   * Vendedor findFirst
   */
  export type VendedorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * Filter, which Vendedor to fetch.
     */
    where?: VendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendedors to fetch.
     */
    orderBy?: VendedorOrderByWithRelationInput | VendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendedors.
     */
    cursor?: VendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendedors.
     */
    distinct?: VendedorScalarFieldEnum | VendedorScalarFieldEnum[]
  }

  /**
   * Vendedor findFirstOrThrow
   */
  export type VendedorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * Filter, which Vendedor to fetch.
     */
    where?: VendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendedors to fetch.
     */
    orderBy?: VendedorOrderByWithRelationInput | VendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendedors.
     */
    cursor?: VendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendedors.
     */
    distinct?: VendedorScalarFieldEnum | VendedorScalarFieldEnum[]
  }

  /**
   * Vendedor findMany
   */
  export type VendedorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * Filter, which Vendedors to fetch.
     */
    where?: VendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendedors to fetch.
     */
    orderBy?: VendedorOrderByWithRelationInput | VendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendedors.
     */
    cursor?: VendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendedors.
     */
    skip?: number
    distinct?: VendedorScalarFieldEnum | VendedorScalarFieldEnum[]
  }

  /**
   * Vendedor create
   */
  export type VendedorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendedor.
     */
    data: XOR<VendedorCreateInput, VendedorUncheckedCreateInput>
  }

  /**
   * Vendedor createMany
   */
  export type VendedorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendedors.
     */
    data: VendedorCreateManyInput | VendedorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendedor createManyAndReturn
   */
  export type VendedorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vendedors.
     */
    data: VendedorCreateManyInput | VendedorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vendedor update
   */
  export type VendedorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendedor.
     */
    data: XOR<VendedorUpdateInput, VendedorUncheckedUpdateInput>
    /**
     * Choose, which Vendedor to update.
     */
    where: VendedorWhereUniqueInput
  }

  /**
   * Vendedor updateMany
   */
  export type VendedorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendedors.
     */
    data: XOR<VendedorUpdateManyMutationInput, VendedorUncheckedUpdateManyInput>
    /**
     * Filter which Vendedors to update
     */
    where?: VendedorWhereInput
  }

  /**
   * Vendedor upsert
   */
  export type VendedorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendedor to update in case it exists.
     */
    where: VendedorWhereUniqueInput
    /**
     * In case the Vendedor found by the `where` argument doesn't exist, create a new Vendedor with this data.
     */
    create: XOR<VendedorCreateInput, VendedorUncheckedCreateInput>
    /**
     * In case the Vendedor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendedorUpdateInput, VendedorUncheckedUpdateInput>
  }

  /**
   * Vendedor delete
   */
  export type VendedorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
    /**
     * Filter which Vendedor to delete.
     */
    where: VendedorWhereUniqueInput
  }

  /**
   * Vendedor deleteMany
   */
  export type VendedorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendedors to delete
     */
    where?: VendedorWhereInput
  }

  /**
   * Vendedor.produtos
   */
  export type Vendedor$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Vendedor without action
   */
  export type VendedorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendedor
     */
    select?: VendedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendedorInclude<ExtArgs> | null
  }


  /**
   * Model Comprador
   */

  export type AggregateComprador = {
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  export type CompradorAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type CompradorSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type CompradorMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type CompradorMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type CompradorCountAggregateOutputType = {
    id: number
    usuarioId: number
    _all: number
  }


  export type CompradorAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type CompradorSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type CompradorMinAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type CompradorMaxAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type CompradorCountAggregateInputType = {
    id?: true
    usuarioId?: true
    _all?: true
  }

  export type CompradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comprador to aggregate.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: CompradorOrderByWithRelationInput | CompradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compradors
    **/
    _count?: true | CompradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompradorMaxAggregateInputType
  }

  export type GetCompradorAggregateType<T extends CompradorAggregateArgs> = {
        [P in keyof T & keyof AggregateComprador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComprador[P]>
      : GetScalarType<T[P], AggregateComprador[P]>
  }




  export type CompradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompradorWhereInput
    orderBy?: CompradorOrderByWithAggregationInput | CompradorOrderByWithAggregationInput[]
    by: CompradorScalarFieldEnum[] | CompradorScalarFieldEnum
    having?: CompradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompradorCountAggregateInputType | true
    _avg?: CompradorAvgAggregateInputType
    _sum?: CompradorSumAggregateInputType
    _min?: CompradorMinAggregateInputType
    _max?: CompradorMaxAggregateInputType
  }

  export type CompradorGroupByOutputType = {
    id: number
    usuarioId: number
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  type GetCompradorGroupByPayload<T extends CompradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompradorGroupByOutputType[P]>
            : GetScalarType<T[P], CompradorGroupByOutputType[P]>
        }
      >
    >


  export type CompradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    carrinho?: boolean | Comprador$carrinhoArgs<ExtArgs>
    compras?: boolean | Comprador$comprasArgs<ExtArgs>
    _count?: boolean | CompradorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comprador"]>

  export type CompradorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comprador"]>

  export type CompradorSelectScalar = {
    id?: boolean
    usuarioId?: boolean
  }

  export type CompradorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    carrinho?: boolean | Comprador$carrinhoArgs<ExtArgs>
    compras?: boolean | Comprador$comprasArgs<ExtArgs>
    _count?: boolean | CompradorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompradorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $CompradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comprador"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      carrinho: Prisma.$CarrinhoPayload<ExtArgs> | null
      compras: Prisma.$CompraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
    }, ExtArgs["result"]["comprador"]>
    composites: {}
  }

  type CompradorGetPayload<S extends boolean | null | undefined | CompradorDefaultArgs> = $Result.GetResult<Prisma.$CompradorPayload, S>

  type CompradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompradorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompradorCountAggregateInputType | true
    }

  export interface CompradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comprador'], meta: { name: 'Comprador' } }
    /**
     * Find zero or one Comprador that matches the filter.
     * @param {CompradorFindUniqueArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompradorFindUniqueArgs>(args: SelectSubset<T, CompradorFindUniqueArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comprador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompradorFindUniqueOrThrowArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompradorFindUniqueOrThrowArgs>(args: SelectSubset<T, CompradorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comprador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorFindFirstArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompradorFindFirstArgs>(args?: SelectSubset<T, CompradorFindFirstArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comprador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorFindFirstOrThrowArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompradorFindFirstOrThrowArgs>(args?: SelectSubset<T, CompradorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Compradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compradors
     * const compradors = await prisma.comprador.findMany()
     * 
     * // Get first 10 Compradors
     * const compradors = await prisma.comprador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compradorWithIdOnly = await prisma.comprador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompradorFindManyArgs>(args?: SelectSubset<T, CompradorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comprador.
     * @param {CompradorCreateArgs} args - Arguments to create a Comprador.
     * @example
     * // Create one Comprador
     * const Comprador = await prisma.comprador.create({
     *   data: {
     *     // ... data to create a Comprador
     *   }
     * })
     * 
     */
    create<T extends CompradorCreateArgs>(args: SelectSubset<T, CompradorCreateArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Compradors.
     * @param {CompradorCreateManyArgs} args - Arguments to create many Compradors.
     * @example
     * // Create many Compradors
     * const comprador = await prisma.comprador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompradorCreateManyArgs>(args?: SelectSubset<T, CompradorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Compradors and returns the data saved in the database.
     * @param {CompradorCreateManyAndReturnArgs} args - Arguments to create many Compradors.
     * @example
     * // Create many Compradors
     * const comprador = await prisma.comprador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Compradors and only return the `id`
     * const compradorWithIdOnly = await prisma.comprador.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompradorCreateManyAndReturnArgs>(args?: SelectSubset<T, CompradorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comprador.
     * @param {CompradorDeleteArgs} args - Arguments to delete one Comprador.
     * @example
     * // Delete one Comprador
     * const Comprador = await prisma.comprador.delete({
     *   where: {
     *     // ... filter to delete one Comprador
     *   }
     * })
     * 
     */
    delete<T extends CompradorDeleteArgs>(args: SelectSubset<T, CompradorDeleteArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comprador.
     * @param {CompradorUpdateArgs} args - Arguments to update one Comprador.
     * @example
     * // Update one Comprador
     * const comprador = await prisma.comprador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompradorUpdateArgs>(args: SelectSubset<T, CompradorUpdateArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Compradors.
     * @param {CompradorDeleteManyArgs} args - Arguments to filter Compradors to delete.
     * @example
     * // Delete a few Compradors
     * const { count } = await prisma.comprador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompradorDeleteManyArgs>(args?: SelectSubset<T, CompradorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compradors
     * const comprador = await prisma.comprador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompradorUpdateManyArgs>(args: SelectSubset<T, CompradorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comprador.
     * @param {CompradorUpsertArgs} args - Arguments to update or create a Comprador.
     * @example
     * // Update or create a Comprador
     * const comprador = await prisma.comprador.upsert({
     *   create: {
     *     // ... data to create a Comprador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comprador we want to update
     *   }
     * })
     */
    upsert<T extends CompradorUpsertArgs>(args: SelectSubset<T, CompradorUpsertArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorCountArgs} args - Arguments to filter Compradors to count.
     * @example
     * // Count the number of Compradors
     * const count = await prisma.comprador.count({
     *   where: {
     *     // ... the filter for the Compradors we want to count
     *   }
     * })
    **/
    count<T extends CompradorCountArgs>(
      args?: Subset<T, CompradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompradorAggregateArgs>(args: Subset<T, CompradorAggregateArgs>): Prisma.PrismaPromise<GetCompradorAggregateType<T>>

    /**
     * Group by Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompradorGroupByArgs['orderBy'] }
        : { orderBy?: CompradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comprador model
   */
  readonly fields: CompradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comprador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    carrinho<T extends Comprador$carrinhoArgs<ExtArgs> = {}>(args?: Subset<T, Comprador$carrinhoArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    compras<T extends Comprador$comprasArgs<ExtArgs> = {}>(args?: Subset<T, Comprador$comprasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comprador model
   */ 
  interface CompradorFieldRefs {
    readonly id: FieldRef<"Comprador", 'Int'>
    readonly usuarioId: FieldRef<"Comprador", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comprador findUnique
   */
  export type CompradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * Filter, which Comprador to fetch.
     */
    where: CompradorWhereUniqueInput
  }

  /**
   * Comprador findUniqueOrThrow
   */
  export type CompradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * Filter, which Comprador to fetch.
     */
    where: CompradorWhereUniqueInput
  }

  /**
   * Comprador findFirst
   */
  export type CompradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * Filter, which Comprador to fetch.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: CompradorOrderByWithRelationInput | CompradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compradors.
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compradors.
     */
    distinct?: CompradorScalarFieldEnum | CompradorScalarFieldEnum[]
  }

  /**
   * Comprador findFirstOrThrow
   */
  export type CompradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * Filter, which Comprador to fetch.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: CompradorOrderByWithRelationInput | CompradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compradors.
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compradors.
     */
    distinct?: CompradorScalarFieldEnum | CompradorScalarFieldEnum[]
  }

  /**
   * Comprador findMany
   */
  export type CompradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * Filter, which Compradors to fetch.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: CompradorOrderByWithRelationInput | CompradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compradors.
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    distinct?: CompradorScalarFieldEnum | CompradorScalarFieldEnum[]
  }

  /**
   * Comprador create
   */
  export type CompradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * The data needed to create a Comprador.
     */
    data: XOR<CompradorCreateInput, CompradorUncheckedCreateInput>
  }

  /**
   * Comprador createMany
   */
  export type CompradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Compradors.
     */
    data: CompradorCreateManyInput | CompradorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comprador createManyAndReturn
   */
  export type CompradorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Compradors.
     */
    data: CompradorCreateManyInput | CompradorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comprador update
   */
  export type CompradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * The data needed to update a Comprador.
     */
    data: XOR<CompradorUpdateInput, CompradorUncheckedUpdateInput>
    /**
     * Choose, which Comprador to update.
     */
    where: CompradorWhereUniqueInput
  }

  /**
   * Comprador updateMany
   */
  export type CompradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Compradors.
     */
    data: XOR<CompradorUpdateManyMutationInput, CompradorUncheckedUpdateManyInput>
    /**
     * Filter which Compradors to update
     */
    where?: CompradorWhereInput
  }

  /**
   * Comprador upsert
   */
  export type CompradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * The filter to search for the Comprador to update in case it exists.
     */
    where: CompradorWhereUniqueInput
    /**
     * In case the Comprador found by the `where` argument doesn't exist, create a new Comprador with this data.
     */
    create: XOR<CompradorCreateInput, CompradorUncheckedCreateInput>
    /**
     * In case the Comprador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompradorUpdateInput, CompradorUncheckedUpdateInput>
  }

  /**
   * Comprador delete
   */
  export type CompradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
    /**
     * Filter which Comprador to delete.
     */
    where: CompradorWhereUniqueInput
  }

  /**
   * Comprador deleteMany
   */
  export type CompradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compradors to delete
     */
    where?: CompradorWhereInput
  }

  /**
   * Comprador.carrinho
   */
  export type Comprador$carrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    where?: CarrinhoWhereInput
  }

  /**
   * Comprador.compras
   */
  export type Comprador$comprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    where?: CompraWhereInput
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Comprador without action
   */
  export type CompradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompradorInclude<ExtArgs> | null
  }


  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
    valor: Decimal | null
    quantidade: number | null
    categoriaId: number | null
    vendedorId: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
    valor: Decimal | null
    quantidade: number | null
    categoriaId: number | null
    vendedorId: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    valor: Decimal | null
    quantidade: number | null
    categoriaId: number | null
    vendedorId: number | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    valor: Decimal | null
    quantidade: number | null
    categoriaId: number | null
    vendedorId: number | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    valor: number
    quantidade: number
    categoriaId: number
    vendedorId: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
    valor?: true
    quantidade?: true
    categoriaId?: true
    vendedorId?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
    valor?: true
    quantidade?: true
    categoriaId?: true
    vendedorId?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
    quantidade?: true
    categoriaId?: true
    vendedorId?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
    quantidade?: true
    categoriaId?: true
    vendedorId?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
    quantidade?: true
    categoriaId?: true
    vendedorId?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    valor: Decimal
    quantidade: number
    categoriaId: number
    vendedorId: number
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
    quantidade?: boolean
    categoriaId?: boolean
    vendedorId?: boolean
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    vendedor?: boolean | VendedorDefaultArgs<ExtArgs>
    carrinhos?: boolean | Produto$carrinhosArgs<ExtArgs>
    favoritos?: boolean | Produto$favoritosArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
    quantidade?: boolean
    categoriaId?: boolean
    vendedorId?: boolean
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    vendedor?: boolean | VendedorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
    quantidade?: boolean
    categoriaId?: boolean
    vendedorId?: boolean
  }

  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    vendedor?: boolean | VendedorDefaultArgs<ExtArgs>
    carrinhos?: boolean | Produto$carrinhosArgs<ExtArgs>
    favoritos?: boolean | Produto$favoritosArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProdutoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    vendedor?: boolean | VendedorDefaultArgs<ExtArgs>
  }

  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      categoria: Prisma.$CategoriaPayload<ExtArgs>
      vendedor: Prisma.$VendedorPayload<ExtArgs>
      carrinhos: Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>[]
      favoritos: Prisma.$ProdutoFavoritoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
      valor: Prisma.Decimal
      quantidade: number
      categoriaId: number
      vendedorId: number
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }

  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoFindUniqueArgs>(args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoFindFirstArgs>(args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoFindManyArgs>(args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
     */
    create<T extends ProdutoCreateArgs>(args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produtos.
     * @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCreateManyArgs>(args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produtos and returns the data saved in the database.
     * @param {ProdutoCreateManyAndReturnArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProdutoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProdutoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
     */
    delete<T extends ProdutoDeleteArgs>(args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoUpdateArgs>(args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoDeleteManyArgs>(args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoUpdateManyArgs>(args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoUpsertArgs>(args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vendedor<T extends VendedorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendedorDefaultArgs<ExtArgs>>): Prisma__VendedorClient<$Result.GetResult<Prisma.$VendedorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    carrinhos<T extends Produto$carrinhosArgs<ExtArgs> = {}>(args?: Subset<T, Produto$carrinhosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findMany"> | Null>
    favoritos<T extends Produto$favoritosArgs<ExtArgs> = {}>(args?: Subset<T, Produto$favoritosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produto model
   */ 
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'Int'>
    readonly nome: FieldRef<"Produto", 'String'>
    readonly descricao: FieldRef<"Produto", 'String'>
    readonly valor: FieldRef<"Produto", 'Decimal'>
    readonly quantidade: FieldRef<"Produto", 'Int'>
    readonly categoriaId: FieldRef<"Produto", 'Int'>
    readonly vendedorId: FieldRef<"Produto", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }

  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto createManyAndReturn
   */
  export type ProdutoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
  }

  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }

  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
  }

  /**
   * Produto.carrinhos
   */
  export type Produto$carrinhosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    where?: ProdutoNoCarrinhoWhereInput
    orderBy?: ProdutoNoCarrinhoOrderByWithRelationInput | ProdutoNoCarrinhoOrderByWithRelationInput[]
    cursor?: ProdutoNoCarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoNoCarrinhoScalarFieldEnum | ProdutoNoCarrinhoScalarFieldEnum[]
  }

  /**
   * Produto.favoritos
   */
  export type Produto$favoritosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    where?: ProdutoFavoritoWhereInput
    orderBy?: ProdutoFavoritoOrderByWithRelationInput | ProdutoFavoritoOrderByWithRelationInput[]
    cursor?: ProdutoFavoritoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoFavoritoScalarFieldEnum | ProdutoFavoritoScalarFieldEnum[]
  }

  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
  }


  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    nome: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    produtos?: boolean | Categoria$produtosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | Categoria$produtosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      produtos: Prisma.$ProdutoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categorias and returns the data saved in the database.
     * @param {CategoriaCreateManyAndReturnArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categorias and only return the `id`
     * const categoriaWithIdOnly = await prisma.categoria.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produtos<T extends Categoria$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'Int'>
    readonly nome: FieldRef<"Categoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria createManyAndReturn
   */
  export type CategoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria.produtos
   */
  export type Categoria$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Carrinho
   */

  export type AggregateCarrinho = {
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  export type CarrinhoAvgAggregateOutputType = {
    id: number | null
    compradorId: number | null
    precoTotal: number | null
    quantidade: number | null
  }

  export type CarrinhoSumAggregateOutputType = {
    id: number | null
    compradorId: number | null
    precoTotal: number | null
    quantidade: number | null
  }

  export type CarrinhoMinAggregateOutputType = {
    id: number | null
    compradorId: number | null
    precoTotal: number | null
    quantidade: number | null
  }

  export type CarrinhoMaxAggregateOutputType = {
    id: number | null
    compradorId: number | null
    precoTotal: number | null
    quantidade: number | null
  }

  export type CarrinhoCountAggregateOutputType = {
    id: number
    compradorId: number
    precoTotal: number
    quantidade: number
    _all: number
  }


  export type CarrinhoAvgAggregateInputType = {
    id?: true
    compradorId?: true
    precoTotal?: true
    quantidade?: true
  }

  export type CarrinhoSumAggregateInputType = {
    id?: true
    compradorId?: true
    precoTotal?: true
    quantidade?: true
  }

  export type CarrinhoMinAggregateInputType = {
    id?: true
    compradorId?: true
    precoTotal?: true
    quantidade?: true
  }

  export type CarrinhoMaxAggregateInputType = {
    id?: true
    compradorId?: true
    precoTotal?: true
    quantidade?: true
  }

  export type CarrinhoCountAggregateInputType = {
    id?: true
    compradorId?: true
    precoTotal?: true
    quantidade?: true
    _all?: true
  }

  export type CarrinhoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrinho to aggregate.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carrinhos
    **/
    _count?: true | CarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarrinhoMaxAggregateInputType
  }

  export type GetCarrinhoAggregateType<T extends CarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrinho[P]>
      : GetScalarType<T[P], AggregateCarrinho[P]>
  }




  export type CarrinhoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrinhoWhereInput
    orderBy?: CarrinhoOrderByWithAggregationInput | CarrinhoOrderByWithAggregationInput[]
    by: CarrinhoScalarFieldEnum[] | CarrinhoScalarFieldEnum
    having?: CarrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarrinhoCountAggregateInputType | true
    _avg?: CarrinhoAvgAggregateInputType
    _sum?: CarrinhoSumAggregateInputType
    _min?: CarrinhoMinAggregateInputType
    _max?: CarrinhoMaxAggregateInputType
  }

  export type CarrinhoGroupByOutputType = {
    id: number
    compradorId: number
    precoTotal: number
    quantidade: number
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  type GetCarrinhoGroupByPayload<T extends CarrinhoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type CarrinhoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compradorId?: boolean
    precoTotal?: boolean
    quantidade?: boolean
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
    produtos?: boolean | Carrinho$produtosArgs<ExtArgs>
    compras?: boolean | Carrinho$comprasArgs<ExtArgs>
    _count?: boolean | CarrinhoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrinho"]>

  export type CarrinhoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compradorId?: boolean
    precoTotal?: boolean
    quantidade?: boolean
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrinho"]>

  export type CarrinhoSelectScalar = {
    id?: boolean
    compradorId?: boolean
    precoTotal?: boolean
    quantidade?: boolean
  }

  export type CarrinhoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
    produtos?: boolean | Carrinho$produtosArgs<ExtArgs>
    compras?: boolean | Carrinho$comprasArgs<ExtArgs>
    _count?: boolean | CarrinhoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CarrinhoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
  }

  export type $CarrinhoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Carrinho"
    objects: {
      comprador: Prisma.$CompradorPayload<ExtArgs>
      produtos: Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>[]
      compras: Prisma.$CompraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      compradorId: number
      precoTotal: number
      quantidade: number
    }, ExtArgs["result"]["carrinho"]>
    composites: {}
  }

  type CarrinhoGetPayload<S extends boolean | null | undefined | CarrinhoDefaultArgs> = $Result.GetResult<Prisma.$CarrinhoPayload, S>

  type CarrinhoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CarrinhoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CarrinhoCountAggregateInputType | true
    }

  export interface CarrinhoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carrinho'], meta: { name: 'Carrinho' } }
    /**
     * Find zero or one Carrinho that matches the filter.
     * @param {CarrinhoFindUniqueArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarrinhoFindUniqueArgs>(args: SelectSubset<T, CarrinhoFindUniqueArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Carrinho that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CarrinhoFindUniqueOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarrinhoFindUniqueOrThrowArgs>(args: SelectSubset<T, CarrinhoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Carrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarrinhoFindFirstArgs>(args?: SelectSubset<T, CarrinhoFindFirstArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Carrinho that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarrinhoFindFirstOrThrowArgs>(args?: SelectSubset<T, CarrinhoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Carrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carrinhos
     * const carrinhos = await prisma.carrinho.findMany()
     * 
     * // Get first 10 Carrinhos
     * const carrinhos = await prisma.carrinho.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carrinhoWithIdOnly = await prisma.carrinho.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarrinhoFindManyArgs>(args?: SelectSubset<T, CarrinhoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Carrinho.
     * @param {CarrinhoCreateArgs} args - Arguments to create a Carrinho.
     * @example
     * // Create one Carrinho
     * const Carrinho = await prisma.carrinho.create({
     *   data: {
     *     // ... data to create a Carrinho
     *   }
     * })
     * 
     */
    create<T extends CarrinhoCreateArgs>(args: SelectSubset<T, CarrinhoCreateArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Carrinhos.
     * @param {CarrinhoCreateManyArgs} args - Arguments to create many Carrinhos.
     * @example
     * // Create many Carrinhos
     * const carrinho = await prisma.carrinho.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarrinhoCreateManyArgs>(args?: SelectSubset<T, CarrinhoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Carrinhos and returns the data saved in the database.
     * @param {CarrinhoCreateManyAndReturnArgs} args - Arguments to create many Carrinhos.
     * @example
     * // Create many Carrinhos
     * const carrinho = await prisma.carrinho.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Carrinhos and only return the `id`
     * const carrinhoWithIdOnly = await prisma.carrinho.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarrinhoCreateManyAndReturnArgs>(args?: SelectSubset<T, CarrinhoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Carrinho.
     * @param {CarrinhoDeleteArgs} args - Arguments to delete one Carrinho.
     * @example
     * // Delete one Carrinho
     * const Carrinho = await prisma.carrinho.delete({
     *   where: {
     *     // ... filter to delete one Carrinho
     *   }
     * })
     * 
     */
    delete<T extends CarrinhoDeleteArgs>(args: SelectSubset<T, CarrinhoDeleteArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Carrinho.
     * @param {CarrinhoUpdateArgs} args - Arguments to update one Carrinho.
     * @example
     * // Update one Carrinho
     * const carrinho = await prisma.carrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarrinhoUpdateArgs>(args: SelectSubset<T, CarrinhoUpdateArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Carrinhos.
     * @param {CarrinhoDeleteManyArgs} args - Arguments to filter Carrinhos to delete.
     * @example
     * // Delete a few Carrinhos
     * const { count } = await prisma.carrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarrinhoDeleteManyArgs>(args?: SelectSubset<T, CarrinhoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carrinhos
     * const carrinho = await prisma.carrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarrinhoUpdateManyArgs>(args: SelectSubset<T, CarrinhoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carrinho.
     * @param {CarrinhoUpsertArgs} args - Arguments to update or create a Carrinho.
     * @example
     * // Update or create a Carrinho
     * const carrinho = await prisma.carrinho.upsert({
     *   create: {
     *     // ... data to create a Carrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrinho we want to update
     *   }
     * })
     */
    upsert<T extends CarrinhoUpsertArgs>(args: SelectSubset<T, CarrinhoUpsertArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoCountArgs} args - Arguments to filter Carrinhos to count.
     * @example
     * // Count the number of Carrinhos
     * const count = await prisma.carrinho.count({
     *   where: {
     *     // ... the filter for the Carrinhos we want to count
     *   }
     * })
    **/
    count<T extends CarrinhoCountArgs>(
      args?: Subset<T, CarrinhoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarrinhoAggregateArgs>(args: Subset<T, CarrinhoAggregateArgs>): Prisma.PrismaPromise<GetCarrinhoAggregateType<T>>

    /**
     * Group by Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: CarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarrinhoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Carrinho model
   */
  readonly fields: CarrinhoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarrinhoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comprador<T extends CompradorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompradorDefaultArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produtos<T extends Carrinho$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Carrinho$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findMany"> | Null>
    compras<T extends Carrinho$comprasArgs<ExtArgs> = {}>(args?: Subset<T, Carrinho$comprasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Carrinho model
   */ 
  interface CarrinhoFieldRefs {
    readonly id: FieldRef<"Carrinho", 'Int'>
    readonly compradorId: FieldRef<"Carrinho", 'Int'>
    readonly precoTotal: FieldRef<"Carrinho", 'Float'>
    readonly quantidade: FieldRef<"Carrinho", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Carrinho findUnique
   */
  export type CarrinhoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho findUniqueOrThrow
   */
  export type CarrinhoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho findFirst
   */
  export type CarrinhoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     */
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho findFirstOrThrow
   */
  export type CarrinhoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     */
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho findMany
   */
  export type CarrinhoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinhos to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho create
   */
  export type CarrinhoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to create a Carrinho.
     */
    data: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
  }

  /**
   * Carrinho createMany
   */
  export type CarrinhoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carrinhos.
     */
    data: CarrinhoCreateManyInput | CarrinhoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Carrinho createManyAndReturn
   */
  export type CarrinhoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Carrinhos.
     */
    data: CarrinhoCreateManyInput | CarrinhoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Carrinho update
   */
  export type CarrinhoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to update a Carrinho.
     */
    data: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
    /**
     * Choose, which Carrinho to update.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho updateMany
   */
  export type CarrinhoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carrinhos.
     */
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyInput>
    /**
     * Filter which Carrinhos to update
     */
    where?: CarrinhoWhereInput
  }

  /**
   * Carrinho upsert
   */
  export type CarrinhoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The filter to search for the Carrinho to update in case it exists.
     */
    where: CarrinhoWhereUniqueInput
    /**
     * In case the Carrinho found by the `where` argument doesn't exist, create a new Carrinho with this data.
     */
    create: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
    /**
     * In case the Carrinho was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
  }

  /**
   * Carrinho delete
   */
  export type CarrinhoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter which Carrinho to delete.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho deleteMany
   */
  export type CarrinhoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrinhos to delete
     */
    where?: CarrinhoWhereInput
  }

  /**
   * Carrinho.produtos
   */
  export type Carrinho$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    where?: ProdutoNoCarrinhoWhereInput
    orderBy?: ProdutoNoCarrinhoOrderByWithRelationInput | ProdutoNoCarrinhoOrderByWithRelationInput[]
    cursor?: ProdutoNoCarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoNoCarrinhoScalarFieldEnum | ProdutoNoCarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho.compras
   */
  export type Carrinho$comprasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    where?: CompraWhereInput
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Carrinho without action
   */
  export type CarrinhoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
  }


  /**
   * Model ProdutoNoCarrinho
   */

  export type AggregateProdutoNoCarrinho = {
    _count: ProdutoNoCarrinhoCountAggregateOutputType | null
    _avg: ProdutoNoCarrinhoAvgAggregateOutputType | null
    _sum: ProdutoNoCarrinhoSumAggregateOutputType | null
    _min: ProdutoNoCarrinhoMinAggregateOutputType | null
    _max: ProdutoNoCarrinhoMaxAggregateOutputType | null
  }

  export type ProdutoNoCarrinhoAvgAggregateOutputType = {
    carrinhoId: number | null
    produtoId: number | null
    quantidade: number | null
  }

  export type ProdutoNoCarrinhoSumAggregateOutputType = {
    carrinhoId: number | null
    produtoId: number | null
    quantidade: number | null
  }

  export type ProdutoNoCarrinhoMinAggregateOutputType = {
    carrinhoId: number | null
    produtoId: number | null
    quantidade: number | null
  }

  export type ProdutoNoCarrinhoMaxAggregateOutputType = {
    carrinhoId: number | null
    produtoId: number | null
    quantidade: number | null
  }

  export type ProdutoNoCarrinhoCountAggregateOutputType = {
    carrinhoId: number
    produtoId: number
    quantidade: number
    _all: number
  }


  export type ProdutoNoCarrinhoAvgAggregateInputType = {
    carrinhoId?: true
    produtoId?: true
    quantidade?: true
  }

  export type ProdutoNoCarrinhoSumAggregateInputType = {
    carrinhoId?: true
    produtoId?: true
    quantidade?: true
  }

  export type ProdutoNoCarrinhoMinAggregateInputType = {
    carrinhoId?: true
    produtoId?: true
    quantidade?: true
  }

  export type ProdutoNoCarrinhoMaxAggregateInputType = {
    carrinhoId?: true
    produtoId?: true
    quantidade?: true
  }

  export type ProdutoNoCarrinhoCountAggregateInputType = {
    carrinhoId?: true
    produtoId?: true
    quantidade?: true
    _all?: true
  }

  export type ProdutoNoCarrinhoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoNoCarrinho to aggregate.
     */
    where?: ProdutoNoCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoNoCarrinhos to fetch.
     */
    orderBy?: ProdutoNoCarrinhoOrderByWithRelationInput | ProdutoNoCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoNoCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoNoCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoNoCarrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutoNoCarrinhos
    **/
    _count?: true | ProdutoNoCarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoNoCarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoNoCarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoNoCarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoNoCarrinhoMaxAggregateInputType
  }

  export type GetProdutoNoCarrinhoAggregateType<T extends ProdutoNoCarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutoNoCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutoNoCarrinho[P]>
      : GetScalarType<T[P], AggregateProdutoNoCarrinho[P]>
  }




  export type ProdutoNoCarrinhoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoNoCarrinhoWhereInput
    orderBy?: ProdutoNoCarrinhoOrderByWithAggregationInput | ProdutoNoCarrinhoOrderByWithAggregationInput[]
    by: ProdutoNoCarrinhoScalarFieldEnum[] | ProdutoNoCarrinhoScalarFieldEnum
    having?: ProdutoNoCarrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoNoCarrinhoCountAggregateInputType | true
    _avg?: ProdutoNoCarrinhoAvgAggregateInputType
    _sum?: ProdutoNoCarrinhoSumAggregateInputType
    _min?: ProdutoNoCarrinhoMinAggregateInputType
    _max?: ProdutoNoCarrinhoMaxAggregateInputType
  }

  export type ProdutoNoCarrinhoGroupByOutputType = {
    carrinhoId: number
    produtoId: number
    quantidade: number
    _count: ProdutoNoCarrinhoCountAggregateOutputType | null
    _avg: ProdutoNoCarrinhoAvgAggregateOutputType | null
    _sum: ProdutoNoCarrinhoSumAggregateOutputType | null
    _min: ProdutoNoCarrinhoMinAggregateOutputType | null
    _max: ProdutoNoCarrinhoMaxAggregateOutputType | null
  }

  type GetProdutoNoCarrinhoGroupByPayload<T extends ProdutoNoCarrinhoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoNoCarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoNoCarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoNoCarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoNoCarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoNoCarrinhoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    carrinhoId?: boolean
    produtoId?: boolean
    quantidade?: boolean
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtoNoCarrinho"]>

  export type ProdutoNoCarrinhoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    carrinhoId?: boolean
    produtoId?: boolean
    quantidade?: boolean
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtoNoCarrinho"]>

  export type ProdutoNoCarrinhoSelectScalar = {
    carrinhoId?: boolean
    produtoId?: boolean
    quantidade?: boolean
  }

  export type ProdutoNoCarrinhoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }
  export type ProdutoNoCarrinhoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }

  export type $ProdutoNoCarrinhoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutoNoCarrinho"
    objects: {
      carrinho: Prisma.$CarrinhoPayload<ExtArgs>
      produto: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      carrinhoId: number
      produtoId: number
      quantidade: number
    }, ExtArgs["result"]["produtoNoCarrinho"]>
    composites: {}
  }

  type ProdutoNoCarrinhoGetPayload<S extends boolean | null | undefined | ProdutoNoCarrinhoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload, S>

  type ProdutoNoCarrinhoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoNoCarrinhoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoNoCarrinhoCountAggregateInputType | true
    }

  export interface ProdutoNoCarrinhoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutoNoCarrinho'], meta: { name: 'ProdutoNoCarrinho' } }
    /**
     * Find zero or one ProdutoNoCarrinho that matches the filter.
     * @param {ProdutoNoCarrinhoFindUniqueArgs} args - Arguments to find a ProdutoNoCarrinho
     * @example
     * // Get one ProdutoNoCarrinho
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoNoCarrinhoFindUniqueArgs>(args: SelectSubset<T, ProdutoNoCarrinhoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProdutoNoCarrinho that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutoNoCarrinhoFindUniqueOrThrowArgs} args - Arguments to find a ProdutoNoCarrinho
     * @example
     * // Get one ProdutoNoCarrinho
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoNoCarrinhoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoNoCarrinhoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProdutoNoCarrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoFindFirstArgs} args - Arguments to find a ProdutoNoCarrinho
     * @example
     * // Get one ProdutoNoCarrinho
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoNoCarrinhoFindFirstArgs>(args?: SelectSubset<T, ProdutoNoCarrinhoFindFirstArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProdutoNoCarrinho that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoFindFirstOrThrowArgs} args - Arguments to find a ProdutoNoCarrinho
     * @example
     * // Get one ProdutoNoCarrinho
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoNoCarrinhoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoNoCarrinhoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProdutoNoCarrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutoNoCarrinhos
     * const produtoNoCarrinhos = await prisma.produtoNoCarrinho.findMany()
     * 
     * // Get first 10 ProdutoNoCarrinhos
     * const produtoNoCarrinhos = await prisma.produtoNoCarrinho.findMany({ take: 10 })
     * 
     * // Only select the `carrinhoId`
     * const produtoNoCarrinhoWithCarrinhoIdOnly = await prisma.produtoNoCarrinho.findMany({ select: { carrinhoId: true } })
     * 
     */
    findMany<T extends ProdutoNoCarrinhoFindManyArgs>(args?: SelectSubset<T, ProdutoNoCarrinhoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProdutoNoCarrinho.
     * @param {ProdutoNoCarrinhoCreateArgs} args - Arguments to create a ProdutoNoCarrinho.
     * @example
     * // Create one ProdutoNoCarrinho
     * const ProdutoNoCarrinho = await prisma.produtoNoCarrinho.create({
     *   data: {
     *     // ... data to create a ProdutoNoCarrinho
     *   }
     * })
     * 
     */
    create<T extends ProdutoNoCarrinhoCreateArgs>(args: SelectSubset<T, ProdutoNoCarrinhoCreateArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProdutoNoCarrinhos.
     * @param {ProdutoNoCarrinhoCreateManyArgs} args - Arguments to create many ProdutoNoCarrinhos.
     * @example
     * // Create many ProdutoNoCarrinhos
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoNoCarrinhoCreateManyArgs>(args?: SelectSubset<T, ProdutoNoCarrinhoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProdutoNoCarrinhos and returns the data saved in the database.
     * @param {ProdutoNoCarrinhoCreateManyAndReturnArgs} args - Arguments to create many ProdutoNoCarrinhos.
     * @example
     * // Create many ProdutoNoCarrinhos
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProdutoNoCarrinhos and only return the `carrinhoId`
     * const produtoNoCarrinhoWithCarrinhoIdOnly = await prisma.produtoNoCarrinho.createManyAndReturn({ 
     *   select: { carrinhoId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProdutoNoCarrinhoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProdutoNoCarrinhoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProdutoNoCarrinho.
     * @param {ProdutoNoCarrinhoDeleteArgs} args - Arguments to delete one ProdutoNoCarrinho.
     * @example
     * // Delete one ProdutoNoCarrinho
     * const ProdutoNoCarrinho = await prisma.produtoNoCarrinho.delete({
     *   where: {
     *     // ... filter to delete one ProdutoNoCarrinho
     *   }
     * })
     * 
     */
    delete<T extends ProdutoNoCarrinhoDeleteArgs>(args: SelectSubset<T, ProdutoNoCarrinhoDeleteArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProdutoNoCarrinho.
     * @param {ProdutoNoCarrinhoUpdateArgs} args - Arguments to update one ProdutoNoCarrinho.
     * @example
     * // Update one ProdutoNoCarrinho
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoNoCarrinhoUpdateArgs>(args: SelectSubset<T, ProdutoNoCarrinhoUpdateArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProdutoNoCarrinhos.
     * @param {ProdutoNoCarrinhoDeleteManyArgs} args - Arguments to filter ProdutoNoCarrinhos to delete.
     * @example
     * // Delete a few ProdutoNoCarrinhos
     * const { count } = await prisma.produtoNoCarrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoNoCarrinhoDeleteManyArgs>(args?: SelectSubset<T, ProdutoNoCarrinhoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutoNoCarrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutoNoCarrinhos
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoNoCarrinhoUpdateManyArgs>(args: SelectSubset<T, ProdutoNoCarrinhoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutoNoCarrinho.
     * @param {ProdutoNoCarrinhoUpsertArgs} args - Arguments to update or create a ProdutoNoCarrinho.
     * @example
     * // Update or create a ProdutoNoCarrinho
     * const produtoNoCarrinho = await prisma.produtoNoCarrinho.upsert({
     *   create: {
     *     // ... data to create a ProdutoNoCarrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutoNoCarrinho we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoNoCarrinhoUpsertArgs>(args: SelectSubset<T, ProdutoNoCarrinhoUpsertArgs<ExtArgs>>): Prisma__ProdutoNoCarrinhoClient<$Result.GetResult<Prisma.$ProdutoNoCarrinhoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProdutoNoCarrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoCountArgs} args - Arguments to filter ProdutoNoCarrinhos to count.
     * @example
     * // Count the number of ProdutoNoCarrinhos
     * const count = await prisma.produtoNoCarrinho.count({
     *   where: {
     *     // ... the filter for the ProdutoNoCarrinhos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoNoCarrinhoCountArgs>(
      args?: Subset<T, ProdutoNoCarrinhoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoNoCarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutoNoCarrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoNoCarrinhoAggregateArgs>(args: Subset<T, ProdutoNoCarrinhoAggregateArgs>): Prisma.PrismaPromise<GetProdutoNoCarrinhoAggregateType<T>>

    /**
     * Group by ProdutoNoCarrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoNoCarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoNoCarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoNoCarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoNoCarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoNoCarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoNoCarrinhoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutoNoCarrinho model
   */
  readonly fields: ProdutoNoCarrinhoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutoNoCarrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoNoCarrinhoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carrinho<T extends CarrinhoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarrinhoDefaultArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produto<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdutoNoCarrinho model
   */ 
  interface ProdutoNoCarrinhoFieldRefs {
    readonly carrinhoId: FieldRef<"ProdutoNoCarrinho", 'Int'>
    readonly produtoId: FieldRef<"ProdutoNoCarrinho", 'Int'>
    readonly quantidade: FieldRef<"ProdutoNoCarrinho", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProdutoNoCarrinho findUnique
   */
  export type ProdutoNoCarrinhoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoNoCarrinho to fetch.
     */
    where: ProdutoNoCarrinhoWhereUniqueInput
  }

  /**
   * ProdutoNoCarrinho findUniqueOrThrow
   */
  export type ProdutoNoCarrinhoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoNoCarrinho to fetch.
     */
    where: ProdutoNoCarrinhoWhereUniqueInput
  }

  /**
   * ProdutoNoCarrinho findFirst
   */
  export type ProdutoNoCarrinhoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoNoCarrinho to fetch.
     */
    where?: ProdutoNoCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoNoCarrinhos to fetch.
     */
    orderBy?: ProdutoNoCarrinhoOrderByWithRelationInput | ProdutoNoCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoNoCarrinhos.
     */
    cursor?: ProdutoNoCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoNoCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoNoCarrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoNoCarrinhos.
     */
    distinct?: ProdutoNoCarrinhoScalarFieldEnum | ProdutoNoCarrinhoScalarFieldEnum[]
  }

  /**
   * ProdutoNoCarrinho findFirstOrThrow
   */
  export type ProdutoNoCarrinhoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoNoCarrinho to fetch.
     */
    where?: ProdutoNoCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoNoCarrinhos to fetch.
     */
    orderBy?: ProdutoNoCarrinhoOrderByWithRelationInput | ProdutoNoCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoNoCarrinhos.
     */
    cursor?: ProdutoNoCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoNoCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoNoCarrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoNoCarrinhos.
     */
    distinct?: ProdutoNoCarrinhoScalarFieldEnum | ProdutoNoCarrinhoScalarFieldEnum[]
  }

  /**
   * ProdutoNoCarrinho findMany
   */
  export type ProdutoNoCarrinhoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoNoCarrinhos to fetch.
     */
    where?: ProdutoNoCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoNoCarrinhos to fetch.
     */
    orderBy?: ProdutoNoCarrinhoOrderByWithRelationInput | ProdutoNoCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutoNoCarrinhos.
     */
    cursor?: ProdutoNoCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoNoCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoNoCarrinhos.
     */
    skip?: number
    distinct?: ProdutoNoCarrinhoScalarFieldEnum | ProdutoNoCarrinhoScalarFieldEnum[]
  }

  /**
   * ProdutoNoCarrinho create
   */
  export type ProdutoNoCarrinhoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdutoNoCarrinho.
     */
    data: XOR<ProdutoNoCarrinhoCreateInput, ProdutoNoCarrinhoUncheckedCreateInput>
  }

  /**
   * ProdutoNoCarrinho createMany
   */
  export type ProdutoNoCarrinhoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutoNoCarrinhos.
     */
    data: ProdutoNoCarrinhoCreateManyInput | ProdutoNoCarrinhoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdutoNoCarrinho createManyAndReturn
   */
  export type ProdutoNoCarrinhoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProdutoNoCarrinhos.
     */
    data: ProdutoNoCarrinhoCreateManyInput | ProdutoNoCarrinhoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProdutoNoCarrinho update
   */
  export type ProdutoNoCarrinhoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdutoNoCarrinho.
     */
    data: XOR<ProdutoNoCarrinhoUpdateInput, ProdutoNoCarrinhoUncheckedUpdateInput>
    /**
     * Choose, which ProdutoNoCarrinho to update.
     */
    where: ProdutoNoCarrinhoWhereUniqueInput
  }

  /**
   * ProdutoNoCarrinho updateMany
   */
  export type ProdutoNoCarrinhoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutoNoCarrinhos.
     */
    data: XOR<ProdutoNoCarrinhoUpdateManyMutationInput, ProdutoNoCarrinhoUncheckedUpdateManyInput>
    /**
     * Filter which ProdutoNoCarrinhos to update
     */
    where?: ProdutoNoCarrinhoWhereInput
  }

  /**
   * ProdutoNoCarrinho upsert
   */
  export type ProdutoNoCarrinhoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdutoNoCarrinho to update in case it exists.
     */
    where: ProdutoNoCarrinhoWhereUniqueInput
    /**
     * In case the ProdutoNoCarrinho found by the `where` argument doesn't exist, create a new ProdutoNoCarrinho with this data.
     */
    create: XOR<ProdutoNoCarrinhoCreateInput, ProdutoNoCarrinhoUncheckedCreateInput>
    /**
     * In case the ProdutoNoCarrinho was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoNoCarrinhoUpdateInput, ProdutoNoCarrinhoUncheckedUpdateInput>
  }

  /**
   * ProdutoNoCarrinho delete
   */
  export type ProdutoNoCarrinhoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
    /**
     * Filter which ProdutoNoCarrinho to delete.
     */
    where: ProdutoNoCarrinhoWhereUniqueInput
  }

  /**
   * ProdutoNoCarrinho deleteMany
   */
  export type ProdutoNoCarrinhoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoNoCarrinhos to delete
     */
    where?: ProdutoNoCarrinhoWhereInput
  }

  /**
   * ProdutoNoCarrinho without action
   */
  export type ProdutoNoCarrinhoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoNoCarrinho
     */
    select?: ProdutoNoCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoNoCarrinhoInclude<ExtArgs> | null
  }


  /**
   * Model Compra
   */

  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number | null
    compradorId: number | null
    carrinhoId: number | null
    valorTotal: number | null
  }

  export type CompraSumAggregateOutputType = {
    id: number | null
    compradorId: number | null
    carrinhoId: number | null
    valorTotal: number | null
  }

  export type CompraMinAggregateOutputType = {
    id: number | null
    compradorId: number | null
    carrinhoId: number | null
    dataCompra: Date | null
    valorTotal: number | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number | null
    compradorId: number | null
    carrinhoId: number | null
    dataCompra: Date | null
    valorTotal: number | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    compradorId: number
    carrinhoId: number
    dataCompra: number
    valorTotal: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
    compradorId?: true
    carrinhoId?: true
    valorTotal?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
    compradorId?: true
    carrinhoId?: true
    valorTotal?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    compradorId?: true
    carrinhoId?: true
    dataCompra?: true
    valorTotal?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    compradorId?: true
    carrinhoId?: true
    dataCompra?: true
    valorTotal?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    compradorId?: true
    carrinhoId?: true
    dataCompra?: true
    valorTotal?: true
    _all?: true
  }

  export type CompraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compra to aggregate.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type CompraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompraWhereInput
    orderBy?: CompraOrderByWithAggregationInput | CompraOrderByWithAggregationInput[]
    by: CompraScalarFieldEnum[] | CompraScalarFieldEnum
    having?: CompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }

  export type CompraGroupByOutputType = {
    id: number
    compradorId: number
    carrinhoId: number
    dataCompra: Date
    valorTotal: number
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type CompraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compradorId?: boolean
    carrinhoId?: boolean
    dataCompra?: boolean
    valorTotal?: boolean
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type CompraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compradorId?: boolean
    carrinhoId?: boolean
    dataCompra?: boolean
    valorTotal?: boolean
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type CompraSelectScalar = {
    id?: boolean
    compradorId?: boolean
    carrinhoId?: boolean
    dataCompra?: boolean
    valorTotal?: boolean
  }

  export type CompraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
  }
  export type CompraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comprador?: boolean | CompradorDefaultArgs<ExtArgs>
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
  }

  export type $CompraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Compra"
    objects: {
      comprador: Prisma.$CompradorPayload<ExtArgs>
      carrinho: Prisma.$CarrinhoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      compradorId: number
      carrinhoId: number
      dataCompra: Date
      valorTotal: number
    }, ExtArgs["result"]["compra"]>
    composites: {}
  }

  type CompraGetPayload<S extends boolean | null | undefined | CompraDefaultArgs> = $Result.GetResult<Prisma.$CompraPayload, S>

  type CompraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface CompraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Compra'], meta: { name: 'Compra' } }
    /**
     * Find zero or one Compra that matches the filter.
     * @param {CompraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompraFindUniqueArgs>(args: SelectSubset<T, CompraFindUniqueArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Compra that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompraFindUniqueOrThrowArgs>(args: SelectSubset<T, CompraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompraFindFirstArgs>(args?: SelectSubset<T, CompraFindFirstArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Compra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompraFindFirstOrThrowArgs>(args?: SelectSubset<T, CompraFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompraFindManyArgs>(args?: SelectSubset<T, CompraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Compra.
     * @param {CompraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
     */
    create<T extends CompraCreateArgs>(args: SelectSubset<T, CompraCreateArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Compras.
     * @param {CompraCreateManyArgs} args - Arguments to create many Compras.
     * @example
     * // Create many Compras
     * const compra = await prisma.compra.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompraCreateManyArgs>(args?: SelectSubset<T, CompraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Compras and returns the data saved in the database.
     * @param {CompraCreateManyAndReturnArgs} args - Arguments to create many Compras.
     * @example
     * // Create many Compras
     * const compra = await prisma.compra.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Compras and only return the `id`
     * const compraWithIdOnly = await prisma.compra.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompraCreateManyAndReturnArgs>(args?: SelectSubset<T, CompraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Compra.
     * @param {CompraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
     */
    delete<T extends CompraDeleteArgs>(args: SelectSubset<T, CompraDeleteArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Compra.
     * @param {CompraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompraUpdateArgs>(args: SelectSubset<T, CompraUpdateArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Compras.
     * @param {CompraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompraDeleteManyArgs>(args?: SelectSubset<T, CompraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompraUpdateManyArgs>(args: SelectSubset<T, CompraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {CompraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
     */
    upsert<T extends CompraUpsertArgs>(args: SelectSubset<T, CompraUpsertArgs<ExtArgs>>): Prisma__CompraClient<$Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends CompraCountArgs>(
      args?: Subset<T, CompraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Compra model
   */
  readonly fields: CompraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comprador<T extends CompradorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompradorDefaultArgs<ExtArgs>>): Prisma__CompradorClient<$Result.GetResult<Prisma.$CompradorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    carrinho<T extends CarrinhoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarrinhoDefaultArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Compra model
   */ 
  interface CompraFieldRefs {
    readonly id: FieldRef<"Compra", 'Int'>
    readonly compradorId: FieldRef<"Compra", 'Int'>
    readonly carrinhoId: FieldRef<"Compra", 'Int'>
    readonly dataCompra: FieldRef<"Compra", 'DateTime'>
    readonly valorTotal: FieldRef<"Compra", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Compra findUnique
   */
  export type CompraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findUniqueOrThrow
   */
  export type CompraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findFirst
   */
  export type CompraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Compra findFirstOrThrow
   */
  export type CompraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Compra findMany
   */
  export type CompraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: CompraOrderByWithRelationInput | CompraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }

  /**
   * Compra create
   */
  export type CompraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * The data needed to create a Compra.
     */
    data: XOR<CompraCreateInput, CompraUncheckedCreateInput>
  }

  /**
   * Compra createMany
   */
  export type CompraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Compras.
     */
    data: CompraCreateManyInput | CompraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Compra createManyAndReturn
   */
  export type CompraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Compras.
     */
    data: CompraCreateManyInput | CompraCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Compra update
   */
  export type CompraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * The data needed to update a Compra.
     */
    data: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
    /**
     * Choose, which Compra to update.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra updateMany
   */
  export type CompraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Compras.
     */
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: CompraWhereInput
  }

  /**
   * Compra upsert
   */
  export type CompraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * The filter to search for the Compra to update in case it exists.
     */
    where: CompraWhereUniqueInput
    /**
     * In case the Compra found by the `where` argument doesn't exist, create a new Compra with this data.
     */
    create: XOR<CompraCreateInput, CompraUncheckedCreateInput>
    /**
     * In case the Compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
  }

  /**
   * Compra delete
   */
  export type CompraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
    /**
     * Filter which Compra to delete.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra deleteMany
   */
  export type CompraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compras to delete
     */
    where?: CompraWhereInput
  }

  /**
   * Compra without action
   */
  export type CompraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompraInclude<ExtArgs> | null
  }


  /**
   * Model Mensagem
   */

  export type AggregateMensagem = {
    _count: MensagemCountAggregateOutputType | null
    _avg: MensagemAvgAggregateOutputType | null
    _sum: MensagemSumAggregateOutputType | null
    _min: MensagemMinAggregateOutputType | null
    _max: MensagemMaxAggregateOutputType | null
  }

  export type MensagemAvgAggregateOutputType = {
    id: number | null
    remetenteId: number | null
    destinatarioId: number | null
  }

  export type MensagemSumAggregateOutputType = {
    id: number | null
    remetenteId: number | null
    destinatarioId: number | null
  }

  export type MensagemMinAggregateOutputType = {
    id: number | null
    conteudo: string | null
    remetenteId: number | null
    destinatarioId: number | null
    dataEnvio: Date | null
  }

  export type MensagemMaxAggregateOutputType = {
    id: number | null
    conteudo: string | null
    remetenteId: number | null
    destinatarioId: number | null
    dataEnvio: Date | null
  }

  export type MensagemCountAggregateOutputType = {
    id: number
    conteudo: number
    remetenteId: number
    destinatarioId: number
    dataEnvio: number
    _all: number
  }


  export type MensagemAvgAggregateInputType = {
    id?: true
    remetenteId?: true
    destinatarioId?: true
  }

  export type MensagemSumAggregateInputType = {
    id?: true
    remetenteId?: true
    destinatarioId?: true
  }

  export type MensagemMinAggregateInputType = {
    id?: true
    conteudo?: true
    remetenteId?: true
    destinatarioId?: true
    dataEnvio?: true
  }

  export type MensagemMaxAggregateInputType = {
    id?: true
    conteudo?: true
    remetenteId?: true
    destinatarioId?: true
    dataEnvio?: true
  }

  export type MensagemCountAggregateInputType = {
    id?: true
    conteudo?: true
    remetenteId?: true
    destinatarioId?: true
    dataEnvio?: true
    _all?: true
  }

  export type MensagemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mensagem to aggregate.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mensagems
    **/
    _count?: true | MensagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensagemMaxAggregateInputType
  }

  export type GetMensagemAggregateType<T extends MensagemAggregateArgs> = {
        [P in keyof T & keyof AggregateMensagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensagem[P]>
      : GetScalarType<T[P], AggregateMensagem[P]>
  }




  export type MensagemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemWhereInput
    orderBy?: MensagemOrderByWithAggregationInput | MensagemOrderByWithAggregationInput[]
    by: MensagemScalarFieldEnum[] | MensagemScalarFieldEnum
    having?: MensagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensagemCountAggregateInputType | true
    _avg?: MensagemAvgAggregateInputType
    _sum?: MensagemSumAggregateInputType
    _min?: MensagemMinAggregateInputType
    _max?: MensagemMaxAggregateInputType
  }

  export type MensagemGroupByOutputType = {
    id: number
    conteudo: string
    remetenteId: number
    destinatarioId: number
    dataEnvio: Date
    _count: MensagemCountAggregateOutputType | null
    _avg: MensagemAvgAggregateOutputType | null
    _sum: MensagemSumAggregateOutputType | null
    _min: MensagemMinAggregateOutputType | null
    _max: MensagemMaxAggregateOutputType | null
  }

  type GetMensagemGroupByPayload<T extends MensagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensagemGroupByOutputType[P]>
            : GetScalarType<T[P], MensagemGroupByOutputType[P]>
        }
      >
    >


  export type MensagemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conteudo?: boolean
    remetenteId?: boolean
    destinatarioId?: boolean
    dataEnvio?: boolean
    remetente?: boolean | UsuarioDefaultArgs<ExtArgs>
    destinatario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensagem"]>

  export type MensagemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conteudo?: boolean
    remetenteId?: boolean
    destinatarioId?: boolean
    dataEnvio?: boolean
    remetente?: boolean | UsuarioDefaultArgs<ExtArgs>
    destinatario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensagem"]>

  export type MensagemSelectScalar = {
    id?: boolean
    conteudo?: boolean
    remetenteId?: boolean
    destinatarioId?: boolean
    dataEnvio?: boolean
  }

  export type MensagemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    remetente?: boolean | UsuarioDefaultArgs<ExtArgs>
    destinatario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type MensagemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    remetente?: boolean | UsuarioDefaultArgs<ExtArgs>
    destinatario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $MensagemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mensagem"
    objects: {
      remetente: Prisma.$UsuarioPayload<ExtArgs>
      destinatario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      conteudo: string
      remetenteId: number
      destinatarioId: number
      dataEnvio: Date
    }, ExtArgs["result"]["mensagem"]>
    composites: {}
  }

  type MensagemGetPayload<S extends boolean | null | undefined | MensagemDefaultArgs> = $Result.GetResult<Prisma.$MensagemPayload, S>

  type MensagemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MensagemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MensagemCountAggregateInputType | true
    }

  export interface MensagemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mensagem'], meta: { name: 'Mensagem' } }
    /**
     * Find zero or one Mensagem that matches the filter.
     * @param {MensagemFindUniqueArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MensagemFindUniqueArgs>(args: SelectSubset<T, MensagemFindUniqueArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mensagem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MensagemFindUniqueOrThrowArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MensagemFindUniqueOrThrowArgs>(args: SelectSubset<T, MensagemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mensagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemFindFirstArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MensagemFindFirstArgs>(args?: SelectSubset<T, MensagemFindFirstArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mensagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemFindFirstOrThrowArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MensagemFindFirstOrThrowArgs>(args?: SelectSubset<T, MensagemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Mensagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensagems
     * const mensagems = await prisma.mensagem.findMany()
     * 
     * // Get first 10 Mensagems
     * const mensagems = await prisma.mensagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensagemWithIdOnly = await prisma.mensagem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MensagemFindManyArgs>(args?: SelectSubset<T, MensagemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mensagem.
     * @param {MensagemCreateArgs} args - Arguments to create a Mensagem.
     * @example
     * // Create one Mensagem
     * const Mensagem = await prisma.mensagem.create({
     *   data: {
     *     // ... data to create a Mensagem
     *   }
     * })
     * 
     */
    create<T extends MensagemCreateArgs>(args: SelectSubset<T, MensagemCreateArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Mensagems.
     * @param {MensagemCreateManyArgs} args - Arguments to create many Mensagems.
     * @example
     * // Create many Mensagems
     * const mensagem = await prisma.mensagem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MensagemCreateManyArgs>(args?: SelectSubset<T, MensagemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mensagems and returns the data saved in the database.
     * @param {MensagemCreateManyAndReturnArgs} args - Arguments to create many Mensagems.
     * @example
     * // Create many Mensagems
     * const mensagem = await prisma.mensagem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mensagems and only return the `id`
     * const mensagemWithIdOnly = await prisma.mensagem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MensagemCreateManyAndReturnArgs>(args?: SelectSubset<T, MensagemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Mensagem.
     * @param {MensagemDeleteArgs} args - Arguments to delete one Mensagem.
     * @example
     * // Delete one Mensagem
     * const Mensagem = await prisma.mensagem.delete({
     *   where: {
     *     // ... filter to delete one Mensagem
     *   }
     * })
     * 
     */
    delete<T extends MensagemDeleteArgs>(args: SelectSubset<T, MensagemDeleteArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mensagem.
     * @param {MensagemUpdateArgs} args - Arguments to update one Mensagem.
     * @example
     * // Update one Mensagem
     * const mensagem = await prisma.mensagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MensagemUpdateArgs>(args: SelectSubset<T, MensagemUpdateArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Mensagems.
     * @param {MensagemDeleteManyArgs} args - Arguments to filter Mensagems to delete.
     * @example
     * // Delete a few Mensagems
     * const { count } = await prisma.mensagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MensagemDeleteManyArgs>(args?: SelectSubset<T, MensagemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensagems
     * const mensagem = await prisma.mensagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MensagemUpdateManyArgs>(args: SelectSubset<T, MensagemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensagem.
     * @param {MensagemUpsertArgs} args - Arguments to update or create a Mensagem.
     * @example
     * // Update or create a Mensagem
     * const mensagem = await prisma.mensagem.upsert({
     *   create: {
     *     // ... data to create a Mensagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensagem we want to update
     *   }
     * })
     */
    upsert<T extends MensagemUpsertArgs>(args: SelectSubset<T, MensagemUpsertArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Mensagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemCountArgs} args - Arguments to filter Mensagems to count.
     * @example
     * // Count the number of Mensagems
     * const count = await prisma.mensagem.count({
     *   where: {
     *     // ... the filter for the Mensagems we want to count
     *   }
     * })
    **/
    count<T extends MensagemCountArgs>(
      args?: Subset<T, MensagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensagemAggregateArgs>(args: Subset<T, MensagemAggregateArgs>): Prisma.PrismaPromise<GetMensagemAggregateType<T>>

    /**
     * Group by Mensagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensagemGroupByArgs['orderBy'] }
        : { orderBy?: MensagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mensagem model
   */
  readonly fields: MensagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mensagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MensagemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    remetente<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    destinatario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mensagem model
   */ 
  interface MensagemFieldRefs {
    readonly id: FieldRef<"Mensagem", 'Int'>
    readonly conteudo: FieldRef<"Mensagem", 'String'>
    readonly remetenteId: FieldRef<"Mensagem", 'Int'>
    readonly destinatarioId: FieldRef<"Mensagem", 'Int'>
    readonly dataEnvio: FieldRef<"Mensagem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Mensagem findUnique
   */
  export type MensagemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem findUniqueOrThrow
   */
  export type MensagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem findFirst
   */
  export type MensagemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensagems.
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensagems.
     */
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Mensagem findFirstOrThrow
   */
  export type MensagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensagems.
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensagems.
     */
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Mensagem findMany
   */
  export type MensagemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagems to fetch.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mensagems.
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Mensagem create
   */
  export type MensagemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * The data needed to create a Mensagem.
     */
    data: XOR<MensagemCreateInput, MensagemUncheckedCreateInput>
  }

  /**
   * Mensagem createMany
   */
  export type MensagemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mensagems.
     */
    data: MensagemCreateManyInput | MensagemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mensagem createManyAndReturn
   */
  export type MensagemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Mensagems.
     */
    data: MensagemCreateManyInput | MensagemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Mensagem update
   */
  export type MensagemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * The data needed to update a Mensagem.
     */
    data: XOR<MensagemUpdateInput, MensagemUncheckedUpdateInput>
    /**
     * Choose, which Mensagem to update.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem updateMany
   */
  export type MensagemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mensagems.
     */
    data: XOR<MensagemUpdateManyMutationInput, MensagemUncheckedUpdateManyInput>
    /**
     * Filter which Mensagems to update
     */
    where?: MensagemWhereInput
  }

  /**
   * Mensagem upsert
   */
  export type MensagemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * The filter to search for the Mensagem to update in case it exists.
     */
    where: MensagemWhereUniqueInput
    /**
     * In case the Mensagem found by the `where` argument doesn't exist, create a new Mensagem with this data.
     */
    create: XOR<MensagemCreateInput, MensagemUncheckedCreateInput>
    /**
     * In case the Mensagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MensagemUpdateInput, MensagemUncheckedUpdateInput>
  }

  /**
   * Mensagem delete
   */
  export type MensagemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter which Mensagem to delete.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem deleteMany
   */
  export type MensagemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mensagems to delete
     */
    where?: MensagemWhereInput
  }

  /**
   * Mensagem without action
   */
  export type MensagemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
  }


  /**
   * Model ProdutoFavorito
   */

  export type AggregateProdutoFavorito = {
    _count: ProdutoFavoritoCountAggregateOutputType | null
    _avg: ProdutoFavoritoAvgAggregateOutputType | null
    _sum: ProdutoFavoritoSumAggregateOutputType | null
    _min: ProdutoFavoritoMinAggregateOutputType | null
    _max: ProdutoFavoritoMaxAggregateOutputType | null
  }

  export type ProdutoFavoritoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    produtoId: number | null
  }

  export type ProdutoFavoritoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    produtoId: number | null
  }

  export type ProdutoFavoritoMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    produtoId: number | null
  }

  export type ProdutoFavoritoMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    produtoId: number | null
  }

  export type ProdutoFavoritoCountAggregateOutputType = {
    id: number
    usuarioId: number
    produtoId: number
    _all: number
  }


  export type ProdutoFavoritoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    produtoId?: true
  }

  export type ProdutoFavoritoSumAggregateInputType = {
    id?: true
    usuarioId?: true
    produtoId?: true
  }

  export type ProdutoFavoritoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    produtoId?: true
  }

  export type ProdutoFavoritoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    produtoId?: true
  }

  export type ProdutoFavoritoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    produtoId?: true
    _all?: true
  }

  export type ProdutoFavoritoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoFavorito to aggregate.
     */
    where?: ProdutoFavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoFavoritos to fetch.
     */
    orderBy?: ProdutoFavoritoOrderByWithRelationInput | ProdutoFavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoFavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoFavoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoFavoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutoFavoritos
    **/
    _count?: true | ProdutoFavoritoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoFavoritoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoFavoritoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoFavoritoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoFavoritoMaxAggregateInputType
  }

  export type GetProdutoFavoritoAggregateType<T extends ProdutoFavoritoAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutoFavorito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutoFavorito[P]>
      : GetScalarType<T[P], AggregateProdutoFavorito[P]>
  }




  export type ProdutoFavoritoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoFavoritoWhereInput
    orderBy?: ProdutoFavoritoOrderByWithAggregationInput | ProdutoFavoritoOrderByWithAggregationInput[]
    by: ProdutoFavoritoScalarFieldEnum[] | ProdutoFavoritoScalarFieldEnum
    having?: ProdutoFavoritoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoFavoritoCountAggregateInputType | true
    _avg?: ProdutoFavoritoAvgAggregateInputType
    _sum?: ProdutoFavoritoSumAggregateInputType
    _min?: ProdutoFavoritoMinAggregateInputType
    _max?: ProdutoFavoritoMaxAggregateInputType
  }

  export type ProdutoFavoritoGroupByOutputType = {
    id: number
    usuarioId: number
    produtoId: number
    _count: ProdutoFavoritoCountAggregateOutputType | null
    _avg: ProdutoFavoritoAvgAggregateOutputType | null
    _sum: ProdutoFavoritoSumAggregateOutputType | null
    _min: ProdutoFavoritoMinAggregateOutputType | null
    _max: ProdutoFavoritoMaxAggregateOutputType | null
  }

  type GetProdutoFavoritoGroupByPayload<T extends ProdutoFavoritoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoFavoritoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoFavoritoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoFavoritoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoFavoritoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoFavoritoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    produtoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtoFavorito"]>

  export type ProdutoFavoritoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    produtoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtoFavorito"]>

  export type ProdutoFavoritoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    produtoId?: boolean
  }

  export type ProdutoFavoritoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }
  export type ProdutoFavoritoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }

  export type $ProdutoFavoritoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutoFavorito"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      produto: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      produtoId: number
    }, ExtArgs["result"]["produtoFavorito"]>
    composites: {}
  }

  type ProdutoFavoritoGetPayload<S extends boolean | null | undefined | ProdutoFavoritoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoFavoritoPayload, S>

  type ProdutoFavoritoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoFavoritoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoFavoritoCountAggregateInputType | true
    }

  export interface ProdutoFavoritoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutoFavorito'], meta: { name: 'ProdutoFavorito' } }
    /**
     * Find zero or one ProdutoFavorito that matches the filter.
     * @param {ProdutoFavoritoFindUniqueArgs} args - Arguments to find a ProdutoFavorito
     * @example
     * // Get one ProdutoFavorito
     * const produtoFavorito = await prisma.produtoFavorito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoFavoritoFindUniqueArgs>(args: SelectSubset<T, ProdutoFavoritoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProdutoFavorito that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutoFavoritoFindUniqueOrThrowArgs} args - Arguments to find a ProdutoFavorito
     * @example
     * // Get one ProdutoFavorito
     * const produtoFavorito = await prisma.produtoFavorito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoFavoritoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoFavoritoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProdutoFavorito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoFindFirstArgs} args - Arguments to find a ProdutoFavorito
     * @example
     * // Get one ProdutoFavorito
     * const produtoFavorito = await prisma.produtoFavorito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoFavoritoFindFirstArgs>(args?: SelectSubset<T, ProdutoFavoritoFindFirstArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProdutoFavorito that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoFindFirstOrThrowArgs} args - Arguments to find a ProdutoFavorito
     * @example
     * // Get one ProdutoFavorito
     * const produtoFavorito = await prisma.produtoFavorito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoFavoritoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoFavoritoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProdutoFavoritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutoFavoritos
     * const produtoFavoritos = await prisma.produtoFavorito.findMany()
     * 
     * // Get first 10 ProdutoFavoritos
     * const produtoFavoritos = await prisma.produtoFavorito.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoFavoritoWithIdOnly = await prisma.produtoFavorito.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoFavoritoFindManyArgs>(args?: SelectSubset<T, ProdutoFavoritoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProdutoFavorito.
     * @param {ProdutoFavoritoCreateArgs} args - Arguments to create a ProdutoFavorito.
     * @example
     * // Create one ProdutoFavorito
     * const ProdutoFavorito = await prisma.produtoFavorito.create({
     *   data: {
     *     // ... data to create a ProdutoFavorito
     *   }
     * })
     * 
     */
    create<T extends ProdutoFavoritoCreateArgs>(args: SelectSubset<T, ProdutoFavoritoCreateArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProdutoFavoritos.
     * @param {ProdutoFavoritoCreateManyArgs} args - Arguments to create many ProdutoFavoritos.
     * @example
     * // Create many ProdutoFavoritos
     * const produtoFavorito = await prisma.produtoFavorito.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoFavoritoCreateManyArgs>(args?: SelectSubset<T, ProdutoFavoritoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProdutoFavoritos and returns the data saved in the database.
     * @param {ProdutoFavoritoCreateManyAndReturnArgs} args - Arguments to create many ProdutoFavoritos.
     * @example
     * // Create many ProdutoFavoritos
     * const produtoFavorito = await prisma.produtoFavorito.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProdutoFavoritos and only return the `id`
     * const produtoFavoritoWithIdOnly = await prisma.produtoFavorito.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProdutoFavoritoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProdutoFavoritoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProdutoFavorito.
     * @param {ProdutoFavoritoDeleteArgs} args - Arguments to delete one ProdutoFavorito.
     * @example
     * // Delete one ProdutoFavorito
     * const ProdutoFavorito = await prisma.produtoFavorito.delete({
     *   where: {
     *     // ... filter to delete one ProdutoFavorito
     *   }
     * })
     * 
     */
    delete<T extends ProdutoFavoritoDeleteArgs>(args: SelectSubset<T, ProdutoFavoritoDeleteArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProdutoFavorito.
     * @param {ProdutoFavoritoUpdateArgs} args - Arguments to update one ProdutoFavorito.
     * @example
     * // Update one ProdutoFavorito
     * const produtoFavorito = await prisma.produtoFavorito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoFavoritoUpdateArgs>(args: SelectSubset<T, ProdutoFavoritoUpdateArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProdutoFavoritos.
     * @param {ProdutoFavoritoDeleteManyArgs} args - Arguments to filter ProdutoFavoritos to delete.
     * @example
     * // Delete a few ProdutoFavoritos
     * const { count } = await prisma.produtoFavorito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoFavoritoDeleteManyArgs>(args?: SelectSubset<T, ProdutoFavoritoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutoFavoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutoFavoritos
     * const produtoFavorito = await prisma.produtoFavorito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoFavoritoUpdateManyArgs>(args: SelectSubset<T, ProdutoFavoritoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutoFavorito.
     * @param {ProdutoFavoritoUpsertArgs} args - Arguments to update or create a ProdutoFavorito.
     * @example
     * // Update or create a ProdutoFavorito
     * const produtoFavorito = await prisma.produtoFavorito.upsert({
     *   create: {
     *     // ... data to create a ProdutoFavorito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutoFavorito we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoFavoritoUpsertArgs>(args: SelectSubset<T, ProdutoFavoritoUpsertArgs<ExtArgs>>): Prisma__ProdutoFavoritoClient<$Result.GetResult<Prisma.$ProdutoFavoritoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProdutoFavoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoCountArgs} args - Arguments to filter ProdutoFavoritos to count.
     * @example
     * // Count the number of ProdutoFavoritos
     * const count = await prisma.produtoFavorito.count({
     *   where: {
     *     // ... the filter for the ProdutoFavoritos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoFavoritoCountArgs>(
      args?: Subset<T, ProdutoFavoritoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoFavoritoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutoFavorito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoFavoritoAggregateArgs>(args: Subset<T, ProdutoFavoritoAggregateArgs>): Prisma.PrismaPromise<GetProdutoFavoritoAggregateType<T>>

    /**
     * Group by ProdutoFavorito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFavoritoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoFavoritoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoFavoritoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoFavoritoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoFavoritoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoFavoritoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutoFavorito model
   */
  readonly fields: ProdutoFavoritoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutoFavorito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoFavoritoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produto<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdutoFavorito model
   */ 
  interface ProdutoFavoritoFieldRefs {
    readonly id: FieldRef<"ProdutoFavorito", 'Int'>
    readonly usuarioId: FieldRef<"ProdutoFavorito", 'Int'>
    readonly produtoId: FieldRef<"ProdutoFavorito", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProdutoFavorito findUnique
   */
  export type ProdutoFavoritoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoFavorito to fetch.
     */
    where: ProdutoFavoritoWhereUniqueInput
  }

  /**
   * ProdutoFavorito findUniqueOrThrow
   */
  export type ProdutoFavoritoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoFavorito to fetch.
     */
    where: ProdutoFavoritoWhereUniqueInput
  }

  /**
   * ProdutoFavorito findFirst
   */
  export type ProdutoFavoritoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoFavorito to fetch.
     */
    where?: ProdutoFavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoFavoritos to fetch.
     */
    orderBy?: ProdutoFavoritoOrderByWithRelationInput | ProdutoFavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoFavoritos.
     */
    cursor?: ProdutoFavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoFavoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoFavoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoFavoritos.
     */
    distinct?: ProdutoFavoritoScalarFieldEnum | ProdutoFavoritoScalarFieldEnum[]
  }

  /**
   * ProdutoFavorito findFirstOrThrow
   */
  export type ProdutoFavoritoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoFavorito to fetch.
     */
    where?: ProdutoFavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoFavoritos to fetch.
     */
    orderBy?: ProdutoFavoritoOrderByWithRelationInput | ProdutoFavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoFavoritos.
     */
    cursor?: ProdutoFavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoFavoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoFavoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoFavoritos.
     */
    distinct?: ProdutoFavoritoScalarFieldEnum | ProdutoFavoritoScalarFieldEnum[]
  }

  /**
   * ProdutoFavorito findMany
   */
  export type ProdutoFavoritoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoFavoritos to fetch.
     */
    where?: ProdutoFavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoFavoritos to fetch.
     */
    orderBy?: ProdutoFavoritoOrderByWithRelationInput | ProdutoFavoritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutoFavoritos.
     */
    cursor?: ProdutoFavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoFavoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoFavoritos.
     */
    skip?: number
    distinct?: ProdutoFavoritoScalarFieldEnum | ProdutoFavoritoScalarFieldEnum[]
  }

  /**
   * ProdutoFavorito create
   */
  export type ProdutoFavoritoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdutoFavorito.
     */
    data: XOR<ProdutoFavoritoCreateInput, ProdutoFavoritoUncheckedCreateInput>
  }

  /**
   * ProdutoFavorito createMany
   */
  export type ProdutoFavoritoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutoFavoritos.
     */
    data: ProdutoFavoritoCreateManyInput | ProdutoFavoritoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdutoFavorito createManyAndReturn
   */
  export type ProdutoFavoritoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProdutoFavoritos.
     */
    data: ProdutoFavoritoCreateManyInput | ProdutoFavoritoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProdutoFavorito update
   */
  export type ProdutoFavoritoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdutoFavorito.
     */
    data: XOR<ProdutoFavoritoUpdateInput, ProdutoFavoritoUncheckedUpdateInput>
    /**
     * Choose, which ProdutoFavorito to update.
     */
    where: ProdutoFavoritoWhereUniqueInput
  }

  /**
   * ProdutoFavorito updateMany
   */
  export type ProdutoFavoritoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutoFavoritos.
     */
    data: XOR<ProdutoFavoritoUpdateManyMutationInput, ProdutoFavoritoUncheckedUpdateManyInput>
    /**
     * Filter which ProdutoFavoritos to update
     */
    where?: ProdutoFavoritoWhereInput
  }

  /**
   * ProdutoFavorito upsert
   */
  export type ProdutoFavoritoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdutoFavorito to update in case it exists.
     */
    where: ProdutoFavoritoWhereUniqueInput
    /**
     * In case the ProdutoFavorito found by the `where` argument doesn't exist, create a new ProdutoFavorito with this data.
     */
    create: XOR<ProdutoFavoritoCreateInput, ProdutoFavoritoUncheckedCreateInput>
    /**
     * In case the ProdutoFavorito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoFavoritoUpdateInput, ProdutoFavoritoUncheckedUpdateInput>
  }

  /**
   * ProdutoFavorito delete
   */
  export type ProdutoFavoritoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
    /**
     * Filter which ProdutoFavorito to delete.
     */
    where: ProdutoFavoritoWhereUniqueInput
  }

  /**
   * ProdutoFavorito deleteMany
   */
  export type ProdutoFavoritoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoFavoritos to delete
     */
    where?: ProdutoFavoritoWhereInput
  }

  /**
   * ProdutoFavorito without action
   */
  export type ProdutoFavoritoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoFavorito
     */
    select?: ProdutoFavoritoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoFavoritoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    primeiroNome: 'primeiroNome',
    sobrenome: 'sobrenome',
    email: 'email',
    senha: 'senha',
    telefone: 'telefone',
    imagemPerfil: 'imagemPerfil'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const EnderecoScalarFieldEnum: {
    id: 'id',
    cep: 'cep',
    logradouro: 'logradouro',
    numero: 'numero',
    complemento: 'complemento',
    bairro: 'bairro',
    cidade: 'cidade',
    estado: 'estado',
    usuarioId: 'usuarioId'
  };

  export type EnderecoScalarFieldEnum = (typeof EnderecoScalarFieldEnum)[keyof typeof EnderecoScalarFieldEnum]


  export const VendedorScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId'
  };

  export type VendedorScalarFieldEnum = (typeof VendedorScalarFieldEnum)[keyof typeof VendedorScalarFieldEnum]


  export const CompradorScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId'
  };

  export type CompradorScalarFieldEnum = (typeof CompradorScalarFieldEnum)[keyof typeof CompradorScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    valor: 'valor',
    quantidade: 'quantidade',
    categoriaId: 'categoriaId',
    vendedorId: 'vendedorId'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const CarrinhoScalarFieldEnum: {
    id: 'id',
    compradorId: 'compradorId',
    precoTotal: 'precoTotal',
    quantidade: 'quantidade'
  };

  export type CarrinhoScalarFieldEnum = (typeof CarrinhoScalarFieldEnum)[keyof typeof CarrinhoScalarFieldEnum]


  export const ProdutoNoCarrinhoScalarFieldEnum: {
    carrinhoId: 'carrinhoId',
    produtoId: 'produtoId',
    quantidade: 'quantidade'
  };

  export type ProdutoNoCarrinhoScalarFieldEnum = (typeof ProdutoNoCarrinhoScalarFieldEnum)[keyof typeof ProdutoNoCarrinhoScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    compradorId: 'compradorId',
    carrinhoId: 'carrinhoId',
    dataCompra: 'dataCompra',
    valorTotal: 'valorTotal'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const MensagemScalarFieldEnum: {
    id: 'id',
    conteudo: 'conteudo',
    remetenteId: 'remetenteId',
    destinatarioId: 'destinatarioId',
    dataEnvio: 'dataEnvio'
  };

  export type MensagemScalarFieldEnum = (typeof MensagemScalarFieldEnum)[keyof typeof MensagemScalarFieldEnum]


  export const ProdutoFavoritoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    produtoId: 'produtoId'
  };

  export type ProdutoFavoritoScalarFieldEnum = (typeof ProdutoFavoritoScalarFieldEnum)[keyof typeof ProdutoFavoritoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    cpf?: StringFilter<"Usuario"> | string
    primeiroNome?: StringFilter<"Usuario"> | string
    sobrenome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    telefone?: StringNullableFilter<"Usuario"> | string | null
    imagemPerfil?: StringNullableFilter<"Usuario"> | string | null
    endereco?: XOR<EnderecoNullableRelationFilter, EnderecoWhereInput> | null
    vendedor?: XOR<VendedorNullableRelationFilter, VendedorWhereInput> | null
    comprador?: XOR<CompradorNullableRelationFilter, CompradorWhereInput> | null
    mensagensEnviadas?: MensagemListRelationFilter
    mensagensRecebidas?: MensagemListRelationFilter
    favoritos?: ProdutoFavoritoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    primeiroNome?: SortOrder
    sobrenome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrderInput | SortOrder
    imagemPerfil?: SortOrderInput | SortOrder
    endereco?: EnderecoOrderByWithRelationInput
    vendedor?: VendedorOrderByWithRelationInput
    comprador?: CompradorOrderByWithRelationInput
    mensagensEnviadas?: MensagemOrderByRelationAggregateInput
    mensagensRecebidas?: MensagemOrderByRelationAggregateInput
    favoritos?: ProdutoFavoritoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    primeiroNome?: StringFilter<"Usuario"> | string
    sobrenome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    telefone?: StringNullableFilter<"Usuario"> | string | null
    imagemPerfil?: StringNullableFilter<"Usuario"> | string | null
    endereco?: XOR<EnderecoNullableRelationFilter, EnderecoWhereInput> | null
    vendedor?: XOR<VendedorNullableRelationFilter, VendedorWhereInput> | null
    comprador?: XOR<CompradorNullableRelationFilter, CompradorWhereInput> | null
    mensagensEnviadas?: MensagemListRelationFilter
    mensagensRecebidas?: MensagemListRelationFilter
    favoritos?: ProdutoFavoritoListRelationFilter
  }, "id" | "cpf" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    primeiroNome?: SortOrder
    sobrenome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrderInput | SortOrder
    imagemPerfil?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    cpf?: StringWithAggregatesFilter<"Usuario"> | string
    primeiroNome?: StringWithAggregatesFilter<"Usuario"> | string
    sobrenome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    telefone?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    imagemPerfil?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
  }

  export type EnderecoWhereInput = {
    AND?: EnderecoWhereInput | EnderecoWhereInput[]
    OR?: EnderecoWhereInput[]
    NOT?: EnderecoWhereInput | EnderecoWhereInput[]
    id?: IntFilter<"Endereco"> | number
    cep?: StringFilter<"Endereco"> | string
    logradouro?: StringFilter<"Endereco"> | string
    numero?: StringFilter<"Endereco"> | string
    complemento?: StringNullableFilter<"Endereco"> | string | null
    bairro?: StringFilter<"Endereco"> | string
    cidade?: StringFilter<"Endereco"> | string
    estado?: StringFilter<"Endereco"> | string
    usuarioId?: IntFilter<"Endereco"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type EnderecoOrderByWithRelationInput = {
    id?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrderInput | SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type EnderecoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    AND?: EnderecoWhereInput | EnderecoWhereInput[]
    OR?: EnderecoWhereInput[]
    NOT?: EnderecoWhereInput | EnderecoWhereInput[]
    cep?: StringFilter<"Endereco"> | string
    logradouro?: StringFilter<"Endereco"> | string
    numero?: StringFilter<"Endereco"> | string
    complemento?: StringNullableFilter<"Endereco"> | string | null
    bairro?: StringFilter<"Endereco"> | string
    cidade?: StringFilter<"Endereco"> | string
    estado?: StringFilter<"Endereco"> | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id" | "usuarioId">

  export type EnderecoOrderByWithAggregationInput = {
    id?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrderInput | SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
    _count?: EnderecoCountOrderByAggregateInput
    _avg?: EnderecoAvgOrderByAggregateInput
    _max?: EnderecoMaxOrderByAggregateInput
    _min?: EnderecoMinOrderByAggregateInput
    _sum?: EnderecoSumOrderByAggregateInput
  }

  export type EnderecoScalarWhereWithAggregatesInput = {
    AND?: EnderecoScalarWhereWithAggregatesInput | EnderecoScalarWhereWithAggregatesInput[]
    OR?: EnderecoScalarWhereWithAggregatesInput[]
    NOT?: EnderecoScalarWhereWithAggregatesInput | EnderecoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Endereco"> | number
    cep?: StringWithAggregatesFilter<"Endereco"> | string
    logradouro?: StringWithAggregatesFilter<"Endereco"> | string
    numero?: StringWithAggregatesFilter<"Endereco"> | string
    complemento?: StringNullableWithAggregatesFilter<"Endereco"> | string | null
    bairro?: StringWithAggregatesFilter<"Endereco"> | string
    cidade?: StringWithAggregatesFilter<"Endereco"> | string
    estado?: StringWithAggregatesFilter<"Endereco"> | string
    usuarioId?: IntWithAggregatesFilter<"Endereco"> | number
  }

  export type VendedorWhereInput = {
    AND?: VendedorWhereInput | VendedorWhereInput[]
    OR?: VendedorWhereInput[]
    NOT?: VendedorWhereInput | VendedorWhereInput[]
    id?: IntFilter<"Vendedor"> | number
    usuarioId?: IntFilter<"Vendedor"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    produtos?: ProdutoListRelationFilter
  }

  export type VendedorOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    produtos?: ProdutoOrderByRelationAggregateInput
  }

  export type VendedorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    AND?: VendedorWhereInput | VendedorWhereInput[]
    OR?: VendedorWhereInput[]
    NOT?: VendedorWhereInput | VendedorWhereInput[]
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    produtos?: ProdutoListRelationFilter
  }, "id" | "usuarioId">

  export type VendedorOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    _count?: VendedorCountOrderByAggregateInput
    _avg?: VendedorAvgOrderByAggregateInput
    _max?: VendedorMaxOrderByAggregateInput
    _min?: VendedorMinOrderByAggregateInput
    _sum?: VendedorSumOrderByAggregateInput
  }

  export type VendedorScalarWhereWithAggregatesInput = {
    AND?: VendedorScalarWhereWithAggregatesInput | VendedorScalarWhereWithAggregatesInput[]
    OR?: VendedorScalarWhereWithAggregatesInput[]
    NOT?: VendedorScalarWhereWithAggregatesInput | VendedorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vendedor"> | number
    usuarioId?: IntWithAggregatesFilter<"Vendedor"> | number
  }

  export type CompradorWhereInput = {
    AND?: CompradorWhereInput | CompradorWhereInput[]
    OR?: CompradorWhereInput[]
    NOT?: CompradorWhereInput | CompradorWhereInput[]
    id?: IntFilter<"Comprador"> | number
    usuarioId?: IntFilter<"Comprador"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    carrinho?: XOR<CarrinhoNullableRelationFilter, CarrinhoWhereInput> | null
    compras?: CompraListRelationFilter
  }

  export type CompradorOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    carrinho?: CarrinhoOrderByWithRelationInput
    compras?: CompraOrderByRelationAggregateInput
  }

  export type CompradorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    AND?: CompradorWhereInput | CompradorWhereInput[]
    OR?: CompradorWhereInput[]
    NOT?: CompradorWhereInput | CompradorWhereInput[]
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    carrinho?: XOR<CarrinhoNullableRelationFilter, CarrinhoWhereInput> | null
    compras?: CompraListRelationFilter
  }, "id" | "usuarioId">

  export type CompradorOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    _count?: CompradorCountOrderByAggregateInput
    _avg?: CompradorAvgOrderByAggregateInput
    _max?: CompradorMaxOrderByAggregateInput
    _min?: CompradorMinOrderByAggregateInput
    _sum?: CompradorSumOrderByAggregateInput
  }

  export type CompradorScalarWhereWithAggregatesInput = {
    AND?: CompradorScalarWhereWithAggregatesInput | CompradorScalarWhereWithAggregatesInput[]
    OR?: CompradorScalarWhereWithAggregatesInput[]
    NOT?: CompradorScalarWhereWithAggregatesInput | CompradorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comprador"> | number
    usuarioId?: IntWithAggregatesFilter<"Comprador"> | number
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: IntFilter<"Produto"> | number
    nome?: StringFilter<"Produto"> | string
    descricao?: StringFilter<"Produto"> | string
    valor?: DecimalFilter<"Produto"> | Decimal | DecimalJsLike | number | string
    quantidade?: IntFilter<"Produto"> | number
    categoriaId?: IntFilter<"Produto"> | number
    vendedorId?: IntFilter<"Produto"> | number
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
    vendedor?: XOR<VendedorRelationFilter, VendedorWhereInput>
    carrinhos?: ProdutoNoCarrinhoListRelationFilter
    favoritos?: ProdutoFavoritoListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
    categoria?: CategoriaOrderByWithRelationInput
    vendedor?: VendedorOrderByWithRelationInput
    carrinhos?: ProdutoNoCarrinhoOrderByRelationAggregateInput
    favoritos?: ProdutoFavoritoOrderByRelationAggregateInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    nome?: StringFilter<"Produto"> | string
    descricao?: StringFilter<"Produto"> | string
    valor?: DecimalFilter<"Produto"> | Decimal | DecimalJsLike | number | string
    quantidade?: IntFilter<"Produto"> | number
    categoriaId?: IntFilter<"Produto"> | number
    vendedorId?: IntFilter<"Produto"> | number
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
    vendedor?: XOR<VendedorRelationFilter, VendedorWhereInput>
    carrinhos?: ProdutoNoCarrinhoListRelationFilter
    favoritos?: ProdutoFavoritoListRelationFilter
  }, "id">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produto"> | number
    nome?: StringWithAggregatesFilter<"Produto"> | string
    descricao?: StringWithAggregatesFilter<"Produto"> | string
    valor?: DecimalWithAggregatesFilter<"Produto"> | Decimal | DecimalJsLike | number | string
    quantidade?: IntWithAggregatesFilter<"Produto"> | number
    categoriaId?: IntWithAggregatesFilter<"Produto"> | number
    vendedorId?: IntWithAggregatesFilter<"Produto"> | number
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: IntFilter<"Categoria"> | number
    nome?: StringFilter<"Categoria"> | string
    produtos?: ProdutoListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    produtos?: ProdutoOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    produtos?: ProdutoListRelationFilter
  }, "id" | "nome">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categoria"> | number
    nome?: StringWithAggregatesFilter<"Categoria"> | string
  }

  export type CarrinhoWhereInput = {
    AND?: CarrinhoWhereInput | CarrinhoWhereInput[]
    OR?: CarrinhoWhereInput[]
    NOT?: CarrinhoWhereInput | CarrinhoWhereInput[]
    id?: IntFilter<"Carrinho"> | number
    compradorId?: IntFilter<"Carrinho"> | number
    precoTotal?: FloatFilter<"Carrinho"> | number
    quantidade?: IntFilter<"Carrinho"> | number
    comprador?: XOR<CompradorRelationFilter, CompradorWhereInput>
    produtos?: ProdutoNoCarrinhoListRelationFilter
    compras?: CompraListRelationFilter
  }

  export type CarrinhoOrderByWithRelationInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
    comprador?: CompradorOrderByWithRelationInput
    produtos?: ProdutoNoCarrinhoOrderByRelationAggregateInput
    compras?: CompraOrderByRelationAggregateInput
  }

  export type CarrinhoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    compradorId?: number
    AND?: CarrinhoWhereInput | CarrinhoWhereInput[]
    OR?: CarrinhoWhereInput[]
    NOT?: CarrinhoWhereInput | CarrinhoWhereInput[]
    precoTotal?: FloatFilter<"Carrinho"> | number
    quantidade?: IntFilter<"Carrinho"> | number
    comprador?: XOR<CompradorRelationFilter, CompradorWhereInput>
    produtos?: ProdutoNoCarrinhoListRelationFilter
    compras?: CompraListRelationFilter
  }, "id" | "compradorId">

  export type CarrinhoOrderByWithAggregationInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
    _count?: CarrinhoCountOrderByAggregateInput
    _avg?: CarrinhoAvgOrderByAggregateInput
    _max?: CarrinhoMaxOrderByAggregateInput
    _min?: CarrinhoMinOrderByAggregateInput
    _sum?: CarrinhoSumOrderByAggregateInput
  }

  export type CarrinhoScalarWhereWithAggregatesInput = {
    AND?: CarrinhoScalarWhereWithAggregatesInput | CarrinhoScalarWhereWithAggregatesInput[]
    OR?: CarrinhoScalarWhereWithAggregatesInput[]
    NOT?: CarrinhoScalarWhereWithAggregatesInput | CarrinhoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Carrinho"> | number
    compradorId?: IntWithAggregatesFilter<"Carrinho"> | number
    precoTotal?: FloatWithAggregatesFilter<"Carrinho"> | number
    quantidade?: IntWithAggregatesFilter<"Carrinho"> | number
  }

  export type ProdutoNoCarrinhoWhereInput = {
    AND?: ProdutoNoCarrinhoWhereInput | ProdutoNoCarrinhoWhereInput[]
    OR?: ProdutoNoCarrinhoWhereInput[]
    NOT?: ProdutoNoCarrinhoWhereInput | ProdutoNoCarrinhoWhereInput[]
    carrinhoId?: IntFilter<"ProdutoNoCarrinho"> | number
    produtoId?: IntFilter<"ProdutoNoCarrinho"> | number
    quantidade?: IntFilter<"ProdutoNoCarrinho"> | number
    carrinho?: XOR<CarrinhoRelationFilter, CarrinhoWhereInput>
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }

  export type ProdutoNoCarrinhoOrderByWithRelationInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
    carrinho?: CarrinhoOrderByWithRelationInput
    produto?: ProdutoOrderByWithRelationInput
  }

  export type ProdutoNoCarrinhoWhereUniqueInput = Prisma.AtLeast<{
    carrinhoId_produtoId?: ProdutoNoCarrinhoCarrinhoIdProdutoIdCompoundUniqueInput
    AND?: ProdutoNoCarrinhoWhereInput | ProdutoNoCarrinhoWhereInput[]
    OR?: ProdutoNoCarrinhoWhereInput[]
    NOT?: ProdutoNoCarrinhoWhereInput | ProdutoNoCarrinhoWhereInput[]
    carrinhoId?: IntFilter<"ProdutoNoCarrinho"> | number
    produtoId?: IntFilter<"ProdutoNoCarrinho"> | number
    quantidade?: IntFilter<"ProdutoNoCarrinho"> | number
    carrinho?: XOR<CarrinhoRelationFilter, CarrinhoWhereInput>
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }, "carrinhoId_produtoId">

  export type ProdutoNoCarrinhoOrderByWithAggregationInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
    _count?: ProdutoNoCarrinhoCountOrderByAggregateInput
    _avg?: ProdutoNoCarrinhoAvgOrderByAggregateInput
    _max?: ProdutoNoCarrinhoMaxOrderByAggregateInput
    _min?: ProdutoNoCarrinhoMinOrderByAggregateInput
    _sum?: ProdutoNoCarrinhoSumOrderByAggregateInput
  }

  export type ProdutoNoCarrinhoScalarWhereWithAggregatesInput = {
    AND?: ProdutoNoCarrinhoScalarWhereWithAggregatesInput | ProdutoNoCarrinhoScalarWhereWithAggregatesInput[]
    OR?: ProdutoNoCarrinhoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoNoCarrinhoScalarWhereWithAggregatesInput | ProdutoNoCarrinhoScalarWhereWithAggregatesInput[]
    carrinhoId?: IntWithAggregatesFilter<"ProdutoNoCarrinho"> | number
    produtoId?: IntWithAggregatesFilter<"ProdutoNoCarrinho"> | number
    quantidade?: IntWithAggregatesFilter<"ProdutoNoCarrinho"> | number
  }

  export type CompraWhereInput = {
    AND?: CompraWhereInput | CompraWhereInput[]
    OR?: CompraWhereInput[]
    NOT?: CompraWhereInput | CompraWhereInput[]
    id?: IntFilter<"Compra"> | number
    compradorId?: IntFilter<"Compra"> | number
    carrinhoId?: IntFilter<"Compra"> | number
    dataCompra?: DateTimeFilter<"Compra"> | Date | string
    valorTotal?: FloatFilter<"Compra"> | number
    comprador?: XOR<CompradorRelationFilter, CompradorWhereInput>
    carrinho?: XOR<CarrinhoRelationFilter, CarrinhoWhereInput>
  }

  export type CompraOrderByWithRelationInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    dataCompra?: SortOrder
    valorTotal?: SortOrder
    comprador?: CompradorOrderByWithRelationInput
    carrinho?: CarrinhoOrderByWithRelationInput
  }

  export type CompraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompraWhereInput | CompraWhereInput[]
    OR?: CompraWhereInput[]
    NOT?: CompraWhereInput | CompraWhereInput[]
    compradorId?: IntFilter<"Compra"> | number
    carrinhoId?: IntFilter<"Compra"> | number
    dataCompra?: DateTimeFilter<"Compra"> | Date | string
    valorTotal?: FloatFilter<"Compra"> | number
    comprador?: XOR<CompradorRelationFilter, CompradorWhereInput>
    carrinho?: XOR<CarrinhoRelationFilter, CarrinhoWhereInput>
  }, "id">

  export type CompraOrderByWithAggregationInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    dataCompra?: SortOrder
    valorTotal?: SortOrder
    _count?: CompraCountOrderByAggregateInput
    _avg?: CompraAvgOrderByAggregateInput
    _max?: CompraMaxOrderByAggregateInput
    _min?: CompraMinOrderByAggregateInput
    _sum?: CompraSumOrderByAggregateInput
  }

  export type CompraScalarWhereWithAggregatesInput = {
    AND?: CompraScalarWhereWithAggregatesInput | CompraScalarWhereWithAggregatesInput[]
    OR?: CompraScalarWhereWithAggregatesInput[]
    NOT?: CompraScalarWhereWithAggregatesInput | CompraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Compra"> | number
    compradorId?: IntWithAggregatesFilter<"Compra"> | number
    carrinhoId?: IntWithAggregatesFilter<"Compra"> | number
    dataCompra?: DateTimeWithAggregatesFilter<"Compra"> | Date | string
    valorTotal?: FloatWithAggregatesFilter<"Compra"> | number
  }

  export type MensagemWhereInput = {
    AND?: MensagemWhereInput | MensagemWhereInput[]
    OR?: MensagemWhereInput[]
    NOT?: MensagemWhereInput | MensagemWhereInput[]
    id?: IntFilter<"Mensagem"> | number
    conteudo?: StringFilter<"Mensagem"> | string
    remetenteId?: IntFilter<"Mensagem"> | number
    destinatarioId?: IntFilter<"Mensagem"> | number
    dataEnvio?: DateTimeFilter<"Mensagem"> | Date | string
    remetente?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    destinatario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type MensagemOrderByWithRelationInput = {
    id?: SortOrder
    conteudo?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
    dataEnvio?: SortOrder
    remetente?: UsuarioOrderByWithRelationInput
    destinatario?: UsuarioOrderByWithRelationInput
  }

  export type MensagemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MensagemWhereInput | MensagemWhereInput[]
    OR?: MensagemWhereInput[]
    NOT?: MensagemWhereInput | MensagemWhereInput[]
    conteudo?: StringFilter<"Mensagem"> | string
    remetenteId?: IntFilter<"Mensagem"> | number
    destinatarioId?: IntFilter<"Mensagem"> | number
    dataEnvio?: DateTimeFilter<"Mensagem"> | Date | string
    remetente?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    destinatario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type MensagemOrderByWithAggregationInput = {
    id?: SortOrder
    conteudo?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
    dataEnvio?: SortOrder
    _count?: MensagemCountOrderByAggregateInput
    _avg?: MensagemAvgOrderByAggregateInput
    _max?: MensagemMaxOrderByAggregateInput
    _min?: MensagemMinOrderByAggregateInput
    _sum?: MensagemSumOrderByAggregateInput
  }

  export type MensagemScalarWhereWithAggregatesInput = {
    AND?: MensagemScalarWhereWithAggregatesInput | MensagemScalarWhereWithAggregatesInput[]
    OR?: MensagemScalarWhereWithAggregatesInput[]
    NOT?: MensagemScalarWhereWithAggregatesInput | MensagemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mensagem"> | number
    conteudo?: StringWithAggregatesFilter<"Mensagem"> | string
    remetenteId?: IntWithAggregatesFilter<"Mensagem"> | number
    destinatarioId?: IntWithAggregatesFilter<"Mensagem"> | number
    dataEnvio?: DateTimeWithAggregatesFilter<"Mensagem"> | Date | string
  }

  export type ProdutoFavoritoWhereInput = {
    AND?: ProdutoFavoritoWhereInput | ProdutoFavoritoWhereInput[]
    OR?: ProdutoFavoritoWhereInput[]
    NOT?: ProdutoFavoritoWhereInput | ProdutoFavoritoWhereInput[]
    id?: IntFilter<"ProdutoFavorito"> | number
    usuarioId?: IntFilter<"ProdutoFavorito"> | number
    produtoId?: IntFilter<"ProdutoFavorito"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }

  export type ProdutoFavoritoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    produto?: ProdutoOrderByWithRelationInput
  }

  export type ProdutoFavoritoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId_produtoId?: ProdutoFavoritoUsuarioIdProdutoIdCompoundUniqueInput
    AND?: ProdutoFavoritoWhereInput | ProdutoFavoritoWhereInput[]
    OR?: ProdutoFavoritoWhereInput[]
    NOT?: ProdutoFavoritoWhereInput | ProdutoFavoritoWhereInput[]
    usuarioId?: IntFilter<"ProdutoFavorito"> | number
    produtoId?: IntFilter<"ProdutoFavorito"> | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    produto?: XOR<ProdutoRelationFilter, ProdutoWhereInput>
  }, "id" | "usuarioId_produtoId">

  export type ProdutoFavoritoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
    _count?: ProdutoFavoritoCountOrderByAggregateInput
    _avg?: ProdutoFavoritoAvgOrderByAggregateInput
    _max?: ProdutoFavoritoMaxOrderByAggregateInput
    _min?: ProdutoFavoritoMinOrderByAggregateInput
    _sum?: ProdutoFavoritoSumOrderByAggregateInput
  }

  export type ProdutoFavoritoScalarWhereWithAggregatesInput = {
    AND?: ProdutoFavoritoScalarWhereWithAggregatesInput | ProdutoFavoritoScalarWhereWithAggregatesInput[]
    OR?: ProdutoFavoritoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoFavoritoScalarWhereWithAggregatesInput | ProdutoFavoritoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdutoFavorito"> | number
    usuarioId?: IntWithAggregatesFilter<"ProdutoFavorito"> | number
    produtoId?: IntWithAggregatesFilter<"ProdutoFavorito"> | number
  }

  export type UsuarioCreateInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoUncheckedCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorUncheckedCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemUncheckedCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemUncheckedCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUncheckedUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUncheckedUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnderecoCreateInput = {
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
    usuario: UsuarioCreateNestedOneWithoutEnderecoInput
  }

  export type EnderecoUncheckedCreateInput = {
    id?: number
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
    usuarioId: number
  }

  export type EnderecoUpdateInput = {
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutEnderecoNestedInput
  }

  export type EnderecoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type EnderecoCreateManyInput = {
    id?: number
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
    usuarioId: number
  }

  export type EnderecoUpdateManyMutationInput = {
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type VendedorCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutVendedorInput
    produtos?: ProdutoCreateNestedManyWithoutVendedorInput
  }

  export type VendedorUncheckedCreateInput = {
    id?: number
    usuarioId: number
    produtos?: ProdutoUncheckedCreateNestedManyWithoutVendedorInput
  }

  export type VendedorUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutVendedorNestedInput
    produtos?: ProdutoUpdateManyWithoutVendedorNestedInput
  }

  export type VendedorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    produtos?: ProdutoUncheckedUpdateManyWithoutVendedorNestedInput
  }

  export type VendedorCreateManyInput = {
    id?: number
    usuarioId: number
  }

  export type VendedorUpdateManyMutationInput = {

  }

  export type VendedorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type CompradorCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutCompradorInput
    carrinho?: CarrinhoCreateNestedOneWithoutCompradorInput
    compras?: CompraCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUncheckedCreateInput = {
    id?: number
    usuarioId: number
    carrinho?: CarrinhoUncheckedCreateNestedOneWithoutCompradorInput
    compras?: CompraUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutCompradorNestedInput
    carrinho?: CarrinhoUpdateOneWithoutCompradorNestedInput
    compras?: CompraUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUncheckedUpdateOneWithoutCompradorNestedInput
    compras?: CompraUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorCreateManyInput = {
    id?: number
    usuarioId: number
  }

  export type CompradorUpdateManyMutationInput = {

  }

  export type CompradorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateInput = {
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoria: CategoriaCreateNestedOneWithoutProdutosInput
    vendedor: VendedorCreateNestedOneWithoutProdutosInput
    carrinhos?: ProdutoNoCarrinhoCreateNestedManyWithoutProdutoInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoriaId: number
    vendedorId: number
    carrinhos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutProdutoInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutProdutosNestedInput
    vendedor?: VendedorUpdateOneRequiredWithoutProdutosNestedInput
    carrinhos?: ProdutoNoCarrinhoUpdateManyWithoutProdutoNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    vendedorId?: IntFieldUpdateOperationsInput | number
    carrinhos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoCreateManyInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoriaId: number
    vendedorId: number
  }

  export type ProdutoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    vendedorId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaCreateInput = {
    nome: string
    produtos?: ProdutoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    nome: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    nome: string
  }

  export type CategoriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CarrinhoCreateInput = {
    precoTotal: number
    quantidade: number
    comprador: CompradorCreateNestedOneWithoutCarrinhoInput
    produtos?: ProdutoNoCarrinhoCreateNestedManyWithoutCarrinhoInput
    compras?: CompraCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateInput = {
    id?: number
    compradorId: number
    precoTotal: number
    quantidade: number
    produtos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput
    compras?: CompraUncheckedCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUpdateInput = {
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneRequiredWithoutCarrinhoNestedInput
    produtos?: ProdutoNoCarrinhoUpdateManyWithoutCarrinhoNestedInput
    compras?: CompraUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    produtos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput
    compras?: CompraUncheckedUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoCreateManyInput = {
    id?: number
    compradorId: number
    precoTotal: number
    quantidade: number
  }

  export type CarrinhoUpdateManyMutationInput = {
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type CarrinhoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoCreateInput = {
    quantidade: number
    carrinho: CarrinhoCreateNestedOneWithoutProdutosInput
    produto: ProdutoCreateNestedOneWithoutCarrinhosInput
  }

  export type ProdutoNoCarrinhoUncheckedCreateInput = {
    carrinhoId: number
    produtoId: number
    quantidade: number
  }

  export type ProdutoNoCarrinhoUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUpdateOneRequiredWithoutProdutosNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutCarrinhosNestedInput
  }

  export type ProdutoNoCarrinhoUncheckedUpdateInput = {
    carrinhoId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoCreateManyInput = {
    carrinhoId: number
    produtoId: number
    quantidade: number
  }

  export type ProdutoNoCarrinhoUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoUncheckedUpdateManyInput = {
    carrinhoId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type CompraCreateInput = {
    dataCompra?: Date | string
    valorTotal: number
    comprador: CompradorCreateNestedOneWithoutComprasInput
    carrinho: CarrinhoCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateInput = {
    id?: number
    compradorId: number
    carrinhoId: number
    dataCompra?: Date | string
    valorTotal: number
  }

  export type CompraUpdateInput = {
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneRequiredWithoutComprasNestedInput
    carrinho?: CarrinhoUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CompraCreateManyInput = {
    id?: number
    compradorId: number
    carrinhoId: number
    dataCompra?: Date | string
    valorTotal: number
  }

  export type CompraUpdateManyMutationInput = {
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CompraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type MensagemCreateInput = {
    conteudo: string
    dataEnvio?: Date | string
    remetente: UsuarioCreateNestedOneWithoutMensagensEnviadasInput
    destinatario: UsuarioCreateNestedOneWithoutMensagensRecebidasInput
  }

  export type MensagemUncheckedCreateInput = {
    id?: number
    conteudo: string
    remetenteId: number
    destinatarioId: number
    dataEnvio?: Date | string
  }

  export type MensagemUpdateInput = {
    conteudo?: StringFieldUpdateOperationsInput | string
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
    remetente?: UsuarioUpdateOneRequiredWithoutMensagensEnviadasNestedInput
    destinatario?: UsuarioUpdateOneRequiredWithoutMensagensRecebidasNestedInput
  }

  export type MensagemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    conteudo?: StringFieldUpdateOperationsInput | string
    remetenteId?: IntFieldUpdateOperationsInput | number
    destinatarioId?: IntFieldUpdateOperationsInput | number
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemCreateManyInput = {
    id?: number
    conteudo: string
    remetenteId: number
    destinatarioId: number
    dataEnvio?: Date | string
  }

  export type MensagemUpdateManyMutationInput = {
    conteudo?: StringFieldUpdateOperationsInput | string
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    conteudo?: StringFieldUpdateOperationsInput | string
    remetenteId?: IntFieldUpdateOperationsInput | number
    destinatarioId?: IntFieldUpdateOperationsInput | number
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutoFavoritoCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutFavoritosInput
    produto: ProdutoCreateNestedOneWithoutFavoritosInput
  }

  export type ProdutoFavoritoUncheckedCreateInput = {
    id?: number
    usuarioId: number
    produtoId: number
  }

  export type ProdutoFavoritoUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutFavoritosNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutFavoritosNestedInput
  }

  export type ProdutoFavoritoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoFavoritoCreateManyInput = {
    id?: number
    usuarioId: number
    produtoId: number
  }

  export type ProdutoFavoritoUpdateManyMutationInput = {

  }

  export type ProdutoFavoritoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnderecoNullableRelationFilter = {
    is?: EnderecoWhereInput | null
    isNot?: EnderecoWhereInput | null
  }

  export type VendedorNullableRelationFilter = {
    is?: VendedorWhereInput | null
    isNot?: VendedorWhereInput | null
  }

  export type CompradorNullableRelationFilter = {
    is?: CompradorWhereInput | null
    isNot?: CompradorWhereInput | null
  }

  export type MensagemListRelationFilter = {
    every?: MensagemWhereInput
    some?: MensagemWhereInput
    none?: MensagemWhereInput
  }

  export type ProdutoFavoritoListRelationFilter = {
    every?: ProdutoFavoritoWhereInput
    some?: ProdutoFavoritoWhereInput
    none?: ProdutoFavoritoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MensagemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutoFavoritoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    primeiroNome?: SortOrder
    sobrenome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    imagemPerfil?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    primeiroNome?: SortOrder
    sobrenome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    imagemPerfil?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    primeiroNome?: SortOrder
    sobrenome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    telefone?: SortOrder
    imagemPerfil?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type EnderecoCountOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnderecoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnderecoMaxOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnderecoMinOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnderecoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type ProdutoListRelationFilter = {
    every?: ProdutoWhereInput
    some?: ProdutoWhereInput
    none?: ProdutoWhereInput
  }

  export type ProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendedorCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type VendedorAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type VendedorMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type VendedorMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type VendedorSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type CarrinhoNullableRelationFilter = {
    is?: CarrinhoWhereInput | null
    isNot?: CarrinhoWhereInput | null
  }

  export type CompraListRelationFilter = {
    every?: CompraWhereInput
    some?: CompraWhereInput
    none?: CompraWhereInput
  }

  export type CompraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompradorCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type CompradorAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type CompradorMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type CompradorMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type CompradorSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type CategoriaRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type VendedorRelationFilter = {
    is?: VendedorWhereInput
    isNot?: VendedorWhereInput
  }

  export type ProdutoNoCarrinhoListRelationFilter = {
    every?: ProdutoNoCarrinhoWhereInput
    some?: ProdutoNoCarrinhoWhereInput
    none?: ProdutoNoCarrinhoWhereInput
  }

  export type ProdutoNoCarrinhoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    quantidade?: SortOrder
    categoriaId?: SortOrder
    vendedorId?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CompradorRelationFilter = {
    is?: CompradorWhereInput
    isNot?: CompradorWhereInput
  }

  export type CarrinhoCountOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
  }

  export type CarrinhoAvgOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
  }

  export type CarrinhoMaxOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
  }

  export type CarrinhoMinOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
  }

  export type CarrinhoSumOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    precoTotal?: SortOrder
    quantidade?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CarrinhoRelationFilter = {
    is?: CarrinhoWhereInput
    isNot?: CarrinhoWhereInput
  }

  export type ProdutoRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type ProdutoNoCarrinhoCarrinhoIdProdutoIdCompoundUniqueInput = {
    carrinhoId: number
    produtoId: number
  }

  export type ProdutoNoCarrinhoCountOrderByAggregateInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ProdutoNoCarrinhoAvgOrderByAggregateInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ProdutoNoCarrinhoMaxOrderByAggregateInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ProdutoNoCarrinhoMinOrderByAggregateInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ProdutoNoCarrinhoSumOrderByAggregateInput = {
    carrinhoId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompraCountOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    dataCompra?: SortOrder
    valorTotal?: SortOrder
  }

  export type CompraAvgOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    valorTotal?: SortOrder
  }

  export type CompraMaxOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    dataCompra?: SortOrder
    valorTotal?: SortOrder
  }

  export type CompraMinOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    dataCompra?: SortOrder
    valorTotal?: SortOrder
  }

  export type CompraSumOrderByAggregateInput = {
    id?: SortOrder
    compradorId?: SortOrder
    carrinhoId?: SortOrder
    valorTotal?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MensagemCountOrderByAggregateInput = {
    id?: SortOrder
    conteudo?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
    dataEnvio?: SortOrder
  }

  export type MensagemAvgOrderByAggregateInput = {
    id?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
  }

  export type MensagemMaxOrderByAggregateInput = {
    id?: SortOrder
    conteudo?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
    dataEnvio?: SortOrder
  }

  export type MensagemMinOrderByAggregateInput = {
    id?: SortOrder
    conteudo?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
    dataEnvio?: SortOrder
  }

  export type MensagemSumOrderByAggregateInput = {
    id?: SortOrder
    remetenteId?: SortOrder
    destinatarioId?: SortOrder
  }

  export type ProdutoFavoritoUsuarioIdProdutoIdCompoundUniqueInput = {
    usuarioId: number
    produtoId: number
  }

  export type ProdutoFavoritoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
  }

  export type ProdutoFavoritoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
  }

  export type ProdutoFavoritoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
  }

  export type ProdutoFavoritoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
  }

  export type ProdutoFavoritoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    produtoId?: SortOrder
  }

  export type EnderecoCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<EnderecoCreateWithoutUsuarioInput, EnderecoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutUsuarioInput
    connect?: EnderecoWhereUniqueInput
  }

  export type VendedorCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<VendedorCreateWithoutUsuarioInput, VendedorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: VendedorCreateOrConnectWithoutUsuarioInput
    connect?: VendedorWhereUniqueInput
  }

  export type CompradorCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<CompradorCreateWithoutUsuarioInput, CompradorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutUsuarioInput
    connect?: CompradorWhereUniqueInput
  }

  export type MensagemCreateNestedManyWithoutRemetenteInput = {
    create?: XOR<MensagemCreateWithoutRemetenteInput, MensagemUncheckedCreateWithoutRemetenteInput> | MensagemCreateWithoutRemetenteInput[] | MensagemUncheckedCreateWithoutRemetenteInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutRemetenteInput | MensagemCreateOrConnectWithoutRemetenteInput[]
    createMany?: MensagemCreateManyRemetenteInputEnvelope
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
  }

  export type MensagemCreateNestedManyWithoutDestinatarioInput = {
    create?: XOR<MensagemCreateWithoutDestinatarioInput, MensagemUncheckedCreateWithoutDestinatarioInput> | MensagemCreateWithoutDestinatarioInput[] | MensagemUncheckedCreateWithoutDestinatarioInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutDestinatarioInput | MensagemCreateOrConnectWithoutDestinatarioInput[]
    createMany?: MensagemCreateManyDestinatarioInputEnvelope
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
  }

  export type ProdutoFavoritoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutUsuarioInput, ProdutoFavoritoUncheckedCreateWithoutUsuarioInput> | ProdutoFavoritoCreateWithoutUsuarioInput[] | ProdutoFavoritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutUsuarioInput | ProdutoFavoritoCreateOrConnectWithoutUsuarioInput[]
    createMany?: ProdutoFavoritoCreateManyUsuarioInputEnvelope
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
  }

  export type EnderecoUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<EnderecoCreateWithoutUsuarioInput, EnderecoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutUsuarioInput
    connect?: EnderecoWhereUniqueInput
  }

  export type VendedorUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<VendedorCreateWithoutUsuarioInput, VendedorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: VendedorCreateOrConnectWithoutUsuarioInput
    connect?: VendedorWhereUniqueInput
  }

  export type CompradorUncheckedCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<CompradorCreateWithoutUsuarioInput, CompradorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutUsuarioInput
    connect?: CompradorWhereUniqueInput
  }

  export type MensagemUncheckedCreateNestedManyWithoutRemetenteInput = {
    create?: XOR<MensagemCreateWithoutRemetenteInput, MensagemUncheckedCreateWithoutRemetenteInput> | MensagemCreateWithoutRemetenteInput[] | MensagemUncheckedCreateWithoutRemetenteInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutRemetenteInput | MensagemCreateOrConnectWithoutRemetenteInput[]
    createMany?: MensagemCreateManyRemetenteInputEnvelope
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
  }

  export type MensagemUncheckedCreateNestedManyWithoutDestinatarioInput = {
    create?: XOR<MensagemCreateWithoutDestinatarioInput, MensagemUncheckedCreateWithoutDestinatarioInput> | MensagemCreateWithoutDestinatarioInput[] | MensagemUncheckedCreateWithoutDestinatarioInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutDestinatarioInput | MensagemCreateOrConnectWithoutDestinatarioInput[]
    createMany?: MensagemCreateManyDestinatarioInputEnvelope
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
  }

  export type ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutUsuarioInput, ProdutoFavoritoUncheckedCreateWithoutUsuarioInput> | ProdutoFavoritoCreateWithoutUsuarioInput[] | ProdutoFavoritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutUsuarioInput | ProdutoFavoritoCreateOrConnectWithoutUsuarioInput[]
    createMany?: ProdutoFavoritoCreateManyUsuarioInputEnvelope
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnderecoUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<EnderecoCreateWithoutUsuarioInput, EnderecoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutUsuarioInput
    upsert?: EnderecoUpsertWithoutUsuarioInput
    disconnect?: EnderecoWhereInput | boolean
    delete?: EnderecoWhereInput | boolean
    connect?: EnderecoWhereUniqueInput
    update?: XOR<XOR<EnderecoUpdateToOneWithWhereWithoutUsuarioInput, EnderecoUpdateWithoutUsuarioInput>, EnderecoUncheckedUpdateWithoutUsuarioInput>
  }

  export type VendedorUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<VendedorCreateWithoutUsuarioInput, VendedorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: VendedorCreateOrConnectWithoutUsuarioInput
    upsert?: VendedorUpsertWithoutUsuarioInput
    disconnect?: VendedorWhereInput | boolean
    delete?: VendedorWhereInput | boolean
    connect?: VendedorWhereUniqueInput
    update?: XOR<XOR<VendedorUpdateToOneWithWhereWithoutUsuarioInput, VendedorUpdateWithoutUsuarioInput>, VendedorUncheckedUpdateWithoutUsuarioInput>
  }

  export type CompradorUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<CompradorCreateWithoutUsuarioInput, CompradorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutUsuarioInput
    upsert?: CompradorUpsertWithoutUsuarioInput
    disconnect?: CompradorWhereInput | boolean
    delete?: CompradorWhereInput | boolean
    connect?: CompradorWhereUniqueInput
    update?: XOR<XOR<CompradorUpdateToOneWithWhereWithoutUsuarioInput, CompradorUpdateWithoutUsuarioInput>, CompradorUncheckedUpdateWithoutUsuarioInput>
  }

  export type MensagemUpdateManyWithoutRemetenteNestedInput = {
    create?: XOR<MensagemCreateWithoutRemetenteInput, MensagemUncheckedCreateWithoutRemetenteInput> | MensagemCreateWithoutRemetenteInput[] | MensagemUncheckedCreateWithoutRemetenteInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutRemetenteInput | MensagemCreateOrConnectWithoutRemetenteInput[]
    upsert?: MensagemUpsertWithWhereUniqueWithoutRemetenteInput | MensagemUpsertWithWhereUniqueWithoutRemetenteInput[]
    createMany?: MensagemCreateManyRemetenteInputEnvelope
    set?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    disconnect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    delete?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    update?: MensagemUpdateWithWhereUniqueWithoutRemetenteInput | MensagemUpdateWithWhereUniqueWithoutRemetenteInput[]
    updateMany?: MensagemUpdateManyWithWhereWithoutRemetenteInput | MensagemUpdateManyWithWhereWithoutRemetenteInput[]
    deleteMany?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
  }

  export type MensagemUpdateManyWithoutDestinatarioNestedInput = {
    create?: XOR<MensagemCreateWithoutDestinatarioInput, MensagemUncheckedCreateWithoutDestinatarioInput> | MensagemCreateWithoutDestinatarioInput[] | MensagemUncheckedCreateWithoutDestinatarioInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutDestinatarioInput | MensagemCreateOrConnectWithoutDestinatarioInput[]
    upsert?: MensagemUpsertWithWhereUniqueWithoutDestinatarioInput | MensagemUpsertWithWhereUniqueWithoutDestinatarioInput[]
    createMany?: MensagemCreateManyDestinatarioInputEnvelope
    set?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    disconnect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    delete?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    update?: MensagemUpdateWithWhereUniqueWithoutDestinatarioInput | MensagemUpdateWithWhereUniqueWithoutDestinatarioInput[]
    updateMany?: MensagemUpdateManyWithWhereWithoutDestinatarioInput | MensagemUpdateManyWithWhereWithoutDestinatarioInput[]
    deleteMany?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
  }

  export type ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutUsuarioInput, ProdutoFavoritoUncheckedCreateWithoutUsuarioInput> | ProdutoFavoritoCreateWithoutUsuarioInput[] | ProdutoFavoritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutUsuarioInput | ProdutoFavoritoCreateOrConnectWithoutUsuarioInput[]
    upsert?: ProdutoFavoritoUpsertWithWhereUniqueWithoutUsuarioInput | ProdutoFavoritoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ProdutoFavoritoCreateManyUsuarioInputEnvelope
    set?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    disconnect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    delete?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    update?: ProdutoFavoritoUpdateWithWhereUniqueWithoutUsuarioInput | ProdutoFavoritoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ProdutoFavoritoUpdateManyWithWhereWithoutUsuarioInput | ProdutoFavoritoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ProdutoFavoritoScalarWhereInput | ProdutoFavoritoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<EnderecoCreateWithoutUsuarioInput, EnderecoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutUsuarioInput
    upsert?: EnderecoUpsertWithoutUsuarioInput
    disconnect?: EnderecoWhereInput | boolean
    delete?: EnderecoWhereInput | boolean
    connect?: EnderecoWhereUniqueInput
    update?: XOR<XOR<EnderecoUpdateToOneWithWhereWithoutUsuarioInput, EnderecoUpdateWithoutUsuarioInput>, EnderecoUncheckedUpdateWithoutUsuarioInput>
  }

  export type VendedorUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<VendedorCreateWithoutUsuarioInput, VendedorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: VendedorCreateOrConnectWithoutUsuarioInput
    upsert?: VendedorUpsertWithoutUsuarioInput
    disconnect?: VendedorWhereInput | boolean
    delete?: VendedorWhereInput | boolean
    connect?: VendedorWhereUniqueInput
    update?: XOR<XOR<VendedorUpdateToOneWithWhereWithoutUsuarioInput, VendedorUpdateWithoutUsuarioInput>, VendedorUncheckedUpdateWithoutUsuarioInput>
  }

  export type CompradorUncheckedUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<CompradorCreateWithoutUsuarioInput, CompradorUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutUsuarioInput
    upsert?: CompradorUpsertWithoutUsuarioInput
    disconnect?: CompradorWhereInput | boolean
    delete?: CompradorWhereInput | boolean
    connect?: CompradorWhereUniqueInput
    update?: XOR<XOR<CompradorUpdateToOneWithWhereWithoutUsuarioInput, CompradorUpdateWithoutUsuarioInput>, CompradorUncheckedUpdateWithoutUsuarioInput>
  }

  export type MensagemUncheckedUpdateManyWithoutRemetenteNestedInput = {
    create?: XOR<MensagemCreateWithoutRemetenteInput, MensagemUncheckedCreateWithoutRemetenteInput> | MensagemCreateWithoutRemetenteInput[] | MensagemUncheckedCreateWithoutRemetenteInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutRemetenteInput | MensagemCreateOrConnectWithoutRemetenteInput[]
    upsert?: MensagemUpsertWithWhereUniqueWithoutRemetenteInput | MensagemUpsertWithWhereUniqueWithoutRemetenteInput[]
    createMany?: MensagemCreateManyRemetenteInputEnvelope
    set?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    disconnect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    delete?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    update?: MensagemUpdateWithWhereUniqueWithoutRemetenteInput | MensagemUpdateWithWhereUniqueWithoutRemetenteInput[]
    updateMany?: MensagemUpdateManyWithWhereWithoutRemetenteInput | MensagemUpdateManyWithWhereWithoutRemetenteInput[]
    deleteMany?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
  }

  export type MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput = {
    create?: XOR<MensagemCreateWithoutDestinatarioInput, MensagemUncheckedCreateWithoutDestinatarioInput> | MensagemCreateWithoutDestinatarioInput[] | MensagemUncheckedCreateWithoutDestinatarioInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutDestinatarioInput | MensagemCreateOrConnectWithoutDestinatarioInput[]
    upsert?: MensagemUpsertWithWhereUniqueWithoutDestinatarioInput | MensagemUpsertWithWhereUniqueWithoutDestinatarioInput[]
    createMany?: MensagemCreateManyDestinatarioInputEnvelope
    set?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    disconnect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    delete?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    update?: MensagemUpdateWithWhereUniqueWithoutDestinatarioInput | MensagemUpdateWithWhereUniqueWithoutDestinatarioInput[]
    updateMany?: MensagemUpdateManyWithWhereWithoutDestinatarioInput | MensagemUpdateManyWithWhereWithoutDestinatarioInput[]
    deleteMany?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
  }

  export type ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutUsuarioInput, ProdutoFavoritoUncheckedCreateWithoutUsuarioInput> | ProdutoFavoritoCreateWithoutUsuarioInput[] | ProdutoFavoritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutUsuarioInput | ProdutoFavoritoCreateOrConnectWithoutUsuarioInput[]
    upsert?: ProdutoFavoritoUpsertWithWhereUniqueWithoutUsuarioInput | ProdutoFavoritoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ProdutoFavoritoCreateManyUsuarioInputEnvelope
    set?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    disconnect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    delete?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    update?: ProdutoFavoritoUpdateWithWhereUniqueWithoutUsuarioInput | ProdutoFavoritoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ProdutoFavoritoUpdateManyWithWhereWithoutUsuarioInput | ProdutoFavoritoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ProdutoFavoritoScalarWhereInput | ProdutoFavoritoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutEnderecoInput = {
    create?: XOR<UsuarioCreateWithoutEnderecoInput, UsuarioUncheckedCreateWithoutEnderecoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEnderecoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutEnderecoNestedInput = {
    create?: XOR<UsuarioCreateWithoutEnderecoInput, UsuarioUncheckedCreateWithoutEnderecoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEnderecoInput
    upsert?: UsuarioUpsertWithoutEnderecoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutEnderecoInput, UsuarioUpdateWithoutEnderecoInput>, UsuarioUncheckedUpdateWithoutEnderecoInput>
  }

  export type UsuarioCreateNestedOneWithoutVendedorInput = {
    create?: XOR<UsuarioCreateWithoutVendedorInput, UsuarioUncheckedCreateWithoutVendedorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVendedorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ProdutoCreateNestedManyWithoutVendedorInput = {
    create?: XOR<ProdutoCreateWithoutVendedorInput, ProdutoUncheckedCreateWithoutVendedorInput> | ProdutoCreateWithoutVendedorInput[] | ProdutoUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutVendedorInput | ProdutoCreateOrConnectWithoutVendedorInput[]
    createMany?: ProdutoCreateManyVendedorInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ProdutoUncheckedCreateNestedManyWithoutVendedorInput = {
    create?: XOR<ProdutoCreateWithoutVendedorInput, ProdutoUncheckedCreateWithoutVendedorInput> | ProdutoCreateWithoutVendedorInput[] | ProdutoUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutVendedorInput | ProdutoCreateOrConnectWithoutVendedorInput[]
    createMany?: ProdutoCreateManyVendedorInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutVendedorNestedInput = {
    create?: XOR<UsuarioCreateWithoutVendedorInput, UsuarioUncheckedCreateWithoutVendedorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVendedorInput
    upsert?: UsuarioUpsertWithoutVendedorInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutVendedorInput, UsuarioUpdateWithoutVendedorInput>, UsuarioUncheckedUpdateWithoutVendedorInput>
  }

  export type ProdutoUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<ProdutoCreateWithoutVendedorInput, ProdutoUncheckedCreateWithoutVendedorInput> | ProdutoCreateWithoutVendedorInput[] | ProdutoUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutVendedorInput | ProdutoCreateOrConnectWithoutVendedorInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutVendedorInput | ProdutoUpsertWithWhereUniqueWithoutVendedorInput[]
    createMany?: ProdutoCreateManyVendedorInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutVendedorInput | ProdutoUpdateWithWhereUniqueWithoutVendedorInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutVendedorInput | ProdutoUpdateManyWithWhereWithoutVendedorInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type ProdutoUncheckedUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<ProdutoCreateWithoutVendedorInput, ProdutoUncheckedCreateWithoutVendedorInput> | ProdutoCreateWithoutVendedorInput[] | ProdutoUncheckedCreateWithoutVendedorInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutVendedorInput | ProdutoCreateOrConnectWithoutVendedorInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutVendedorInput | ProdutoUpsertWithWhereUniqueWithoutVendedorInput[]
    createMany?: ProdutoCreateManyVendedorInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutVendedorInput | ProdutoUpdateWithWhereUniqueWithoutVendedorInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutVendedorInput | ProdutoUpdateManyWithWhereWithoutVendedorInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutCompradorInput = {
    create?: XOR<UsuarioCreateWithoutCompradorInput, UsuarioUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCompradorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CarrinhoCreateNestedOneWithoutCompradorInput = {
    create?: XOR<CarrinhoCreateWithoutCompradorInput, CarrinhoUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutCompradorInput
    connect?: CarrinhoWhereUniqueInput
  }

  export type CompraCreateNestedManyWithoutCompradorInput = {
    create?: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput> | CompraCreateWithoutCompradorInput[] | CompraUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCompradorInput | CompraCreateOrConnectWithoutCompradorInput[]
    createMany?: CompraCreateManyCompradorInputEnvelope
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
  }

  export type CarrinhoUncheckedCreateNestedOneWithoutCompradorInput = {
    create?: XOR<CarrinhoCreateWithoutCompradorInput, CarrinhoUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutCompradorInput
    connect?: CarrinhoWhereUniqueInput
  }

  export type CompraUncheckedCreateNestedManyWithoutCompradorInput = {
    create?: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput> | CompraCreateWithoutCompradorInput[] | CompraUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCompradorInput | CompraCreateOrConnectWithoutCompradorInput[]
    createMany?: CompraCreateManyCompradorInputEnvelope
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutCompradorNestedInput = {
    create?: XOR<UsuarioCreateWithoutCompradorInput, UsuarioUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCompradorInput
    upsert?: UsuarioUpsertWithoutCompradorInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCompradorInput, UsuarioUpdateWithoutCompradorInput>, UsuarioUncheckedUpdateWithoutCompradorInput>
  }

  export type CarrinhoUpdateOneWithoutCompradorNestedInput = {
    create?: XOR<CarrinhoCreateWithoutCompradorInput, CarrinhoUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutCompradorInput
    upsert?: CarrinhoUpsertWithoutCompradorInput
    disconnect?: CarrinhoWhereInput | boolean
    delete?: CarrinhoWhereInput | boolean
    connect?: CarrinhoWhereUniqueInput
    update?: XOR<XOR<CarrinhoUpdateToOneWithWhereWithoutCompradorInput, CarrinhoUpdateWithoutCompradorInput>, CarrinhoUncheckedUpdateWithoutCompradorInput>
  }

  export type CompraUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput> | CompraCreateWithoutCompradorInput[] | CompraUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCompradorInput | CompraCreateOrConnectWithoutCompradorInput[]
    upsert?: CompraUpsertWithWhereUniqueWithoutCompradorInput | CompraUpsertWithWhereUniqueWithoutCompradorInput[]
    createMany?: CompraCreateManyCompradorInputEnvelope
    set?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    disconnect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    delete?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    update?: CompraUpdateWithWhereUniqueWithoutCompradorInput | CompraUpdateWithWhereUniqueWithoutCompradorInput[]
    updateMany?: CompraUpdateManyWithWhereWithoutCompradorInput | CompraUpdateManyWithWhereWithoutCompradorInput[]
    deleteMany?: CompraScalarWhereInput | CompraScalarWhereInput[]
  }

  export type CarrinhoUncheckedUpdateOneWithoutCompradorNestedInput = {
    create?: XOR<CarrinhoCreateWithoutCompradorInput, CarrinhoUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutCompradorInput
    upsert?: CarrinhoUpsertWithoutCompradorInput
    disconnect?: CarrinhoWhereInput | boolean
    delete?: CarrinhoWhereInput | boolean
    connect?: CarrinhoWhereUniqueInput
    update?: XOR<XOR<CarrinhoUpdateToOneWithWhereWithoutCompradorInput, CarrinhoUpdateWithoutCompradorInput>, CarrinhoUncheckedUpdateWithoutCompradorInput>
  }

  export type CompraUncheckedUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput> | CompraCreateWithoutCompradorInput[] | CompraUncheckedCreateWithoutCompradorInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCompradorInput | CompraCreateOrConnectWithoutCompradorInput[]
    upsert?: CompraUpsertWithWhereUniqueWithoutCompradorInput | CompraUpsertWithWhereUniqueWithoutCompradorInput[]
    createMany?: CompraCreateManyCompradorInputEnvelope
    set?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    disconnect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    delete?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    update?: CompraUpdateWithWhereUniqueWithoutCompradorInput | CompraUpdateWithWhereUniqueWithoutCompradorInput[]
    updateMany?: CompraUpdateManyWithWhereWithoutCompradorInput | CompraUpdateManyWithWhereWithoutCompradorInput[]
    deleteMany?: CompraScalarWhereInput | CompraScalarWhereInput[]
  }

  export type CategoriaCreateNestedOneWithoutProdutosInput = {
    create?: XOR<CategoriaCreateWithoutProdutosInput, CategoriaUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutProdutosInput
    connect?: CategoriaWhereUniqueInput
  }

  export type VendedorCreateNestedOneWithoutProdutosInput = {
    create?: XOR<VendedorCreateWithoutProdutosInput, VendedorUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: VendedorCreateOrConnectWithoutProdutosInput
    connect?: VendedorWhereUniqueInput
  }

  export type ProdutoNoCarrinhoCreateNestedManyWithoutProdutoInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput> | ProdutoNoCarrinhoCreateWithoutProdutoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput | ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyProdutoInputEnvelope
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
  }

  export type ProdutoFavoritoCreateNestedManyWithoutProdutoInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutProdutoInput, ProdutoFavoritoUncheckedCreateWithoutProdutoInput> | ProdutoFavoritoCreateWithoutProdutoInput[] | ProdutoFavoritoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutProdutoInput | ProdutoFavoritoCreateOrConnectWithoutProdutoInput[]
    createMany?: ProdutoFavoritoCreateManyProdutoInputEnvelope
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
  }

  export type ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput> | ProdutoNoCarrinhoCreateWithoutProdutoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput | ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyProdutoInputEnvelope
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
  }

  export type ProdutoFavoritoUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutProdutoInput, ProdutoFavoritoUncheckedCreateWithoutProdutoInput> | ProdutoFavoritoCreateWithoutProdutoInput[] | ProdutoFavoritoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutProdutoInput | ProdutoFavoritoCreateOrConnectWithoutProdutoInput[]
    createMany?: ProdutoFavoritoCreateManyProdutoInputEnvelope
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CategoriaUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<CategoriaCreateWithoutProdutosInput, CategoriaUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutProdutosInput
    upsert?: CategoriaUpsertWithoutProdutosInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutProdutosInput, CategoriaUpdateWithoutProdutosInput>, CategoriaUncheckedUpdateWithoutProdutosInput>
  }

  export type VendedorUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<VendedorCreateWithoutProdutosInput, VendedorUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: VendedorCreateOrConnectWithoutProdutosInput
    upsert?: VendedorUpsertWithoutProdutosInput
    connect?: VendedorWhereUniqueInput
    update?: XOR<XOR<VendedorUpdateToOneWithWhereWithoutProdutosInput, VendedorUpdateWithoutProdutosInput>, VendedorUncheckedUpdateWithoutProdutosInput>
  }

  export type ProdutoNoCarrinhoUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput> | ProdutoNoCarrinhoCreateWithoutProdutoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput | ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput[]
    upsert?: ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutProdutoInput | ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyProdutoInputEnvelope
    set?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    disconnect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    delete?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    update?: ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutProdutoInput | ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: ProdutoNoCarrinhoUpdateManyWithWhereWithoutProdutoInput | ProdutoNoCarrinhoUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: ProdutoNoCarrinhoScalarWhereInput | ProdutoNoCarrinhoScalarWhereInput[]
  }

  export type ProdutoFavoritoUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutProdutoInput, ProdutoFavoritoUncheckedCreateWithoutProdutoInput> | ProdutoFavoritoCreateWithoutProdutoInput[] | ProdutoFavoritoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutProdutoInput | ProdutoFavoritoCreateOrConnectWithoutProdutoInput[]
    upsert?: ProdutoFavoritoUpsertWithWhereUniqueWithoutProdutoInput | ProdutoFavoritoUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: ProdutoFavoritoCreateManyProdutoInputEnvelope
    set?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    disconnect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    delete?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    update?: ProdutoFavoritoUpdateWithWhereUniqueWithoutProdutoInput | ProdutoFavoritoUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: ProdutoFavoritoUpdateManyWithWhereWithoutProdutoInput | ProdutoFavoritoUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: ProdutoFavoritoScalarWhereInput | ProdutoFavoritoScalarWhereInput[]
  }

  export type ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput> | ProdutoNoCarrinhoCreateWithoutProdutoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput | ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput[]
    upsert?: ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutProdutoInput | ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyProdutoInputEnvelope
    set?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    disconnect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    delete?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    update?: ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutProdutoInput | ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: ProdutoNoCarrinhoUpdateManyWithWhereWithoutProdutoInput | ProdutoNoCarrinhoUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: ProdutoNoCarrinhoScalarWhereInput | ProdutoNoCarrinhoScalarWhereInput[]
  }

  export type ProdutoFavoritoUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<ProdutoFavoritoCreateWithoutProdutoInput, ProdutoFavoritoUncheckedCreateWithoutProdutoInput> | ProdutoFavoritoCreateWithoutProdutoInput[] | ProdutoFavoritoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ProdutoFavoritoCreateOrConnectWithoutProdutoInput | ProdutoFavoritoCreateOrConnectWithoutProdutoInput[]
    upsert?: ProdutoFavoritoUpsertWithWhereUniqueWithoutProdutoInput | ProdutoFavoritoUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: ProdutoFavoritoCreateManyProdutoInputEnvelope
    set?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    disconnect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    delete?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    connect?: ProdutoFavoritoWhereUniqueInput | ProdutoFavoritoWhereUniqueInput[]
    update?: ProdutoFavoritoUpdateWithWhereUniqueWithoutProdutoInput | ProdutoFavoritoUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: ProdutoFavoritoUpdateManyWithWhereWithoutProdutoInput | ProdutoFavoritoUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: ProdutoFavoritoScalarWhereInput | ProdutoFavoritoScalarWhereInput[]
  }

  export type ProdutoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput> | ProdutoCreateWithoutCategoriaInput[] | ProdutoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCategoriaInput | ProdutoCreateOrConnectWithoutCategoriaInput[]
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ProdutoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput> | ProdutoCreateWithoutCategoriaInput[] | ProdutoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCategoriaInput | ProdutoCreateOrConnectWithoutCategoriaInput[]
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ProdutoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput> | ProdutoCreateWithoutCategoriaInput[] | ProdutoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCategoriaInput | ProdutoCreateOrConnectWithoutCategoriaInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutCategoriaInput | ProdutoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutCategoriaInput | ProdutoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutCategoriaInput | ProdutoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type ProdutoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput> | ProdutoCreateWithoutCategoriaInput[] | ProdutoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutCategoriaInput | ProdutoCreateOrConnectWithoutCategoriaInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutCategoriaInput | ProdutoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: ProdutoCreateManyCategoriaInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutCategoriaInput | ProdutoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutCategoriaInput | ProdutoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type CompradorCreateNestedOneWithoutCarrinhoInput = {
    create?: XOR<CompradorCreateWithoutCarrinhoInput, CompradorUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutCarrinhoInput
    connect?: CompradorWhereUniqueInput
  }

  export type ProdutoNoCarrinhoCreateNestedManyWithoutCarrinhoInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput> | ProdutoNoCarrinhoCreateWithoutCarrinhoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput | ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyCarrinhoInputEnvelope
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
  }

  export type CompraCreateNestedManyWithoutCarrinhoInput = {
    create?: XOR<CompraCreateWithoutCarrinhoInput, CompraUncheckedCreateWithoutCarrinhoInput> | CompraCreateWithoutCarrinhoInput[] | CompraUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCarrinhoInput | CompraCreateOrConnectWithoutCarrinhoInput[]
    createMany?: CompraCreateManyCarrinhoInputEnvelope
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
  }

  export type ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput> | ProdutoNoCarrinhoCreateWithoutCarrinhoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput | ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyCarrinhoInputEnvelope
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
  }

  export type CompraUncheckedCreateNestedManyWithoutCarrinhoInput = {
    create?: XOR<CompraCreateWithoutCarrinhoInput, CompraUncheckedCreateWithoutCarrinhoInput> | CompraCreateWithoutCarrinhoInput[] | CompraUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCarrinhoInput | CompraCreateOrConnectWithoutCarrinhoInput[]
    createMany?: CompraCreateManyCarrinhoInputEnvelope
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompradorUpdateOneRequiredWithoutCarrinhoNestedInput = {
    create?: XOR<CompradorCreateWithoutCarrinhoInput, CompradorUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutCarrinhoInput
    upsert?: CompradorUpsertWithoutCarrinhoInput
    connect?: CompradorWhereUniqueInput
    update?: XOR<XOR<CompradorUpdateToOneWithWhereWithoutCarrinhoInput, CompradorUpdateWithoutCarrinhoInput>, CompradorUncheckedUpdateWithoutCarrinhoInput>
  }

  export type ProdutoNoCarrinhoUpdateManyWithoutCarrinhoNestedInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput> | ProdutoNoCarrinhoCreateWithoutCarrinhoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput | ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    upsert?: ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput | ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyCarrinhoInputEnvelope
    set?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    disconnect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    delete?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    update?: ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput | ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput[]
    updateMany?: ProdutoNoCarrinhoUpdateManyWithWhereWithoutCarrinhoInput | ProdutoNoCarrinhoUpdateManyWithWhereWithoutCarrinhoInput[]
    deleteMany?: ProdutoNoCarrinhoScalarWhereInput | ProdutoNoCarrinhoScalarWhereInput[]
  }

  export type CompraUpdateManyWithoutCarrinhoNestedInput = {
    create?: XOR<CompraCreateWithoutCarrinhoInput, CompraUncheckedCreateWithoutCarrinhoInput> | CompraCreateWithoutCarrinhoInput[] | CompraUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCarrinhoInput | CompraCreateOrConnectWithoutCarrinhoInput[]
    upsert?: CompraUpsertWithWhereUniqueWithoutCarrinhoInput | CompraUpsertWithWhereUniqueWithoutCarrinhoInput[]
    createMany?: CompraCreateManyCarrinhoInputEnvelope
    set?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    disconnect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    delete?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    update?: CompraUpdateWithWhereUniqueWithoutCarrinhoInput | CompraUpdateWithWhereUniqueWithoutCarrinhoInput[]
    updateMany?: CompraUpdateManyWithWhereWithoutCarrinhoInput | CompraUpdateManyWithWhereWithoutCarrinhoInput[]
    deleteMany?: CompraScalarWhereInput | CompraScalarWhereInput[]
  }

  export type ProdutoNoCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput = {
    create?: XOR<ProdutoNoCarrinhoCreateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput> | ProdutoNoCarrinhoCreateWithoutCarrinhoInput[] | ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput | ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    upsert?: ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput | ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput[]
    createMany?: ProdutoNoCarrinhoCreateManyCarrinhoInputEnvelope
    set?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    disconnect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    delete?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    connect?: ProdutoNoCarrinhoWhereUniqueInput | ProdutoNoCarrinhoWhereUniqueInput[]
    update?: ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput | ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput[]
    updateMany?: ProdutoNoCarrinhoUpdateManyWithWhereWithoutCarrinhoInput | ProdutoNoCarrinhoUpdateManyWithWhereWithoutCarrinhoInput[]
    deleteMany?: ProdutoNoCarrinhoScalarWhereInput | ProdutoNoCarrinhoScalarWhereInput[]
  }

  export type CompraUncheckedUpdateManyWithoutCarrinhoNestedInput = {
    create?: XOR<CompraCreateWithoutCarrinhoInput, CompraUncheckedCreateWithoutCarrinhoInput> | CompraCreateWithoutCarrinhoInput[] | CompraUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: CompraCreateOrConnectWithoutCarrinhoInput | CompraCreateOrConnectWithoutCarrinhoInput[]
    upsert?: CompraUpsertWithWhereUniqueWithoutCarrinhoInput | CompraUpsertWithWhereUniqueWithoutCarrinhoInput[]
    createMany?: CompraCreateManyCarrinhoInputEnvelope
    set?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    disconnect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    delete?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    connect?: CompraWhereUniqueInput | CompraWhereUniqueInput[]
    update?: CompraUpdateWithWhereUniqueWithoutCarrinhoInput | CompraUpdateWithWhereUniqueWithoutCarrinhoInput[]
    updateMany?: CompraUpdateManyWithWhereWithoutCarrinhoInput | CompraUpdateManyWithWhereWithoutCarrinhoInput[]
    deleteMany?: CompraScalarWhereInput | CompraScalarWhereInput[]
  }

  export type CarrinhoCreateNestedOneWithoutProdutosInput = {
    create?: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutProdutosInput
    connect?: CarrinhoWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutCarrinhosInput = {
    create?: XOR<ProdutoCreateWithoutCarrinhosInput, ProdutoUncheckedCreateWithoutCarrinhosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutCarrinhosInput
    connect?: ProdutoWhereUniqueInput
  }

  export type CarrinhoUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutProdutosInput
    upsert?: CarrinhoUpsertWithoutProdutosInput
    connect?: CarrinhoWhereUniqueInput
    update?: XOR<XOR<CarrinhoUpdateToOneWithWhereWithoutProdutosInput, CarrinhoUpdateWithoutProdutosInput>, CarrinhoUncheckedUpdateWithoutProdutosInput>
  }

  export type ProdutoUpdateOneRequiredWithoutCarrinhosNestedInput = {
    create?: XOR<ProdutoCreateWithoutCarrinhosInput, ProdutoUncheckedCreateWithoutCarrinhosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutCarrinhosInput
    upsert?: ProdutoUpsertWithoutCarrinhosInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutCarrinhosInput, ProdutoUpdateWithoutCarrinhosInput>, ProdutoUncheckedUpdateWithoutCarrinhosInput>
  }

  export type CompradorCreateNestedOneWithoutComprasInput = {
    create?: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutComprasInput
    connect?: CompradorWhereUniqueInput
  }

  export type CarrinhoCreateNestedOneWithoutComprasInput = {
    create?: XOR<CarrinhoCreateWithoutComprasInput, CarrinhoUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutComprasInput
    connect?: CarrinhoWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CompradorUpdateOneRequiredWithoutComprasNestedInput = {
    create?: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutComprasInput
    upsert?: CompradorUpsertWithoutComprasInput
    connect?: CompradorWhereUniqueInput
    update?: XOR<XOR<CompradorUpdateToOneWithWhereWithoutComprasInput, CompradorUpdateWithoutComprasInput>, CompradorUncheckedUpdateWithoutComprasInput>
  }

  export type CarrinhoUpdateOneRequiredWithoutComprasNestedInput = {
    create?: XOR<CarrinhoCreateWithoutComprasInput, CarrinhoUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutComprasInput
    upsert?: CarrinhoUpsertWithoutComprasInput
    connect?: CarrinhoWhereUniqueInput
    update?: XOR<XOR<CarrinhoUpdateToOneWithWhereWithoutComprasInput, CarrinhoUpdateWithoutComprasInput>, CarrinhoUncheckedUpdateWithoutComprasInput>
  }

  export type UsuarioCreateNestedOneWithoutMensagensEnviadasInput = {
    create?: XOR<UsuarioCreateWithoutMensagensEnviadasInput, UsuarioUncheckedCreateWithoutMensagensEnviadasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMensagensEnviadasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutMensagensRecebidasInput = {
    create?: XOR<UsuarioCreateWithoutMensagensRecebidasInput, UsuarioUncheckedCreateWithoutMensagensRecebidasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMensagensRecebidasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutMensagensEnviadasNestedInput = {
    create?: XOR<UsuarioCreateWithoutMensagensEnviadasInput, UsuarioUncheckedCreateWithoutMensagensEnviadasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMensagensEnviadasInput
    upsert?: UsuarioUpsertWithoutMensagensEnviadasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutMensagensEnviadasInput, UsuarioUpdateWithoutMensagensEnviadasInput>, UsuarioUncheckedUpdateWithoutMensagensEnviadasInput>
  }

  export type UsuarioUpdateOneRequiredWithoutMensagensRecebidasNestedInput = {
    create?: XOR<UsuarioCreateWithoutMensagensRecebidasInput, UsuarioUncheckedCreateWithoutMensagensRecebidasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMensagensRecebidasInput
    upsert?: UsuarioUpsertWithoutMensagensRecebidasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutMensagensRecebidasInput, UsuarioUpdateWithoutMensagensRecebidasInput>, UsuarioUncheckedUpdateWithoutMensagensRecebidasInput>
  }

  export type UsuarioCreateNestedOneWithoutFavoritosInput = {
    create?: XOR<UsuarioCreateWithoutFavoritosInput, UsuarioUncheckedCreateWithoutFavoritosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFavoritosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutFavoritosInput = {
    create?: XOR<ProdutoCreateWithoutFavoritosInput, ProdutoUncheckedCreateWithoutFavoritosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutFavoritosInput
    connect?: ProdutoWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutFavoritosNestedInput = {
    create?: XOR<UsuarioCreateWithoutFavoritosInput, UsuarioUncheckedCreateWithoutFavoritosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFavoritosInput
    upsert?: UsuarioUpsertWithoutFavoritosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutFavoritosInput, UsuarioUpdateWithoutFavoritosInput>, UsuarioUncheckedUpdateWithoutFavoritosInput>
  }

  export type ProdutoUpdateOneRequiredWithoutFavoritosNestedInput = {
    create?: XOR<ProdutoCreateWithoutFavoritosInput, ProdutoUncheckedCreateWithoutFavoritosInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutFavoritosInput
    upsert?: ProdutoUpsertWithoutFavoritosInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutFavoritosInput, ProdutoUpdateWithoutFavoritosInput>, ProdutoUncheckedUpdateWithoutFavoritosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnderecoCreateWithoutUsuarioInput = {
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
  }

  export type EnderecoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
  }

  export type EnderecoCreateOrConnectWithoutUsuarioInput = {
    where: EnderecoWhereUniqueInput
    create: XOR<EnderecoCreateWithoutUsuarioInput, EnderecoUncheckedCreateWithoutUsuarioInput>
  }

  export type VendedorCreateWithoutUsuarioInput = {
    produtos?: ProdutoCreateNestedManyWithoutVendedorInput
  }

  export type VendedorUncheckedCreateWithoutUsuarioInput = {
    id?: number
    produtos?: ProdutoUncheckedCreateNestedManyWithoutVendedorInput
  }

  export type VendedorCreateOrConnectWithoutUsuarioInput = {
    where: VendedorWhereUniqueInput
    create: XOR<VendedorCreateWithoutUsuarioInput, VendedorUncheckedCreateWithoutUsuarioInput>
  }

  export type CompradorCreateWithoutUsuarioInput = {
    carrinho?: CarrinhoCreateNestedOneWithoutCompradorInput
    compras?: CompraCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUncheckedCreateWithoutUsuarioInput = {
    id?: number
    carrinho?: CarrinhoUncheckedCreateNestedOneWithoutCompradorInput
    compras?: CompraUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type CompradorCreateOrConnectWithoutUsuarioInput = {
    where: CompradorWhereUniqueInput
    create: XOR<CompradorCreateWithoutUsuarioInput, CompradorUncheckedCreateWithoutUsuarioInput>
  }

  export type MensagemCreateWithoutRemetenteInput = {
    conteudo: string
    dataEnvio?: Date | string
    destinatario: UsuarioCreateNestedOneWithoutMensagensRecebidasInput
  }

  export type MensagemUncheckedCreateWithoutRemetenteInput = {
    id?: number
    conteudo: string
    destinatarioId: number
    dataEnvio?: Date | string
  }

  export type MensagemCreateOrConnectWithoutRemetenteInput = {
    where: MensagemWhereUniqueInput
    create: XOR<MensagemCreateWithoutRemetenteInput, MensagemUncheckedCreateWithoutRemetenteInput>
  }

  export type MensagemCreateManyRemetenteInputEnvelope = {
    data: MensagemCreateManyRemetenteInput | MensagemCreateManyRemetenteInput[]
    skipDuplicates?: boolean
  }

  export type MensagemCreateWithoutDestinatarioInput = {
    conteudo: string
    dataEnvio?: Date | string
    remetente: UsuarioCreateNestedOneWithoutMensagensEnviadasInput
  }

  export type MensagemUncheckedCreateWithoutDestinatarioInput = {
    id?: number
    conteudo: string
    remetenteId: number
    dataEnvio?: Date | string
  }

  export type MensagemCreateOrConnectWithoutDestinatarioInput = {
    where: MensagemWhereUniqueInput
    create: XOR<MensagemCreateWithoutDestinatarioInput, MensagemUncheckedCreateWithoutDestinatarioInput>
  }

  export type MensagemCreateManyDestinatarioInputEnvelope = {
    data: MensagemCreateManyDestinatarioInput | MensagemCreateManyDestinatarioInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoFavoritoCreateWithoutUsuarioInput = {
    produto: ProdutoCreateNestedOneWithoutFavoritosInput
  }

  export type ProdutoFavoritoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    produtoId: number
  }

  export type ProdutoFavoritoCreateOrConnectWithoutUsuarioInput = {
    where: ProdutoFavoritoWhereUniqueInput
    create: XOR<ProdutoFavoritoCreateWithoutUsuarioInput, ProdutoFavoritoUncheckedCreateWithoutUsuarioInput>
  }

  export type ProdutoFavoritoCreateManyUsuarioInputEnvelope = {
    data: ProdutoFavoritoCreateManyUsuarioInput | ProdutoFavoritoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type EnderecoUpsertWithoutUsuarioInput = {
    update: XOR<EnderecoUpdateWithoutUsuarioInput, EnderecoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<EnderecoCreateWithoutUsuarioInput, EnderecoUncheckedCreateWithoutUsuarioInput>
    where?: EnderecoWhereInput
  }

  export type EnderecoUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: EnderecoWhereInput
    data: XOR<EnderecoUpdateWithoutUsuarioInput, EnderecoUncheckedUpdateWithoutUsuarioInput>
  }

  export type EnderecoUpdateWithoutUsuarioInput = {
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type VendedorUpsertWithoutUsuarioInput = {
    update: XOR<VendedorUpdateWithoutUsuarioInput, VendedorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<VendedorCreateWithoutUsuarioInput, VendedorUncheckedCreateWithoutUsuarioInput>
    where?: VendedorWhereInput
  }

  export type VendedorUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: VendedorWhereInput
    data: XOR<VendedorUpdateWithoutUsuarioInput, VendedorUncheckedUpdateWithoutUsuarioInput>
  }

  export type VendedorUpdateWithoutUsuarioInput = {
    produtos?: ProdutoUpdateManyWithoutVendedorNestedInput
  }

  export type VendedorUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtos?: ProdutoUncheckedUpdateManyWithoutVendedorNestedInput
  }

  export type CompradorUpsertWithoutUsuarioInput = {
    update: XOR<CompradorUpdateWithoutUsuarioInput, CompradorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CompradorCreateWithoutUsuarioInput, CompradorUncheckedCreateWithoutUsuarioInput>
    where?: CompradorWhereInput
  }

  export type CompradorUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: CompradorWhereInput
    data: XOR<CompradorUpdateWithoutUsuarioInput, CompradorUncheckedUpdateWithoutUsuarioInput>
  }

  export type CompradorUpdateWithoutUsuarioInput = {
    carrinho?: CarrinhoUpdateOneWithoutCompradorNestedInput
    compras?: CompraUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUncheckedUpdateOneWithoutCompradorNestedInput
    compras?: CompraUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type MensagemUpsertWithWhereUniqueWithoutRemetenteInput = {
    where: MensagemWhereUniqueInput
    update: XOR<MensagemUpdateWithoutRemetenteInput, MensagemUncheckedUpdateWithoutRemetenteInput>
    create: XOR<MensagemCreateWithoutRemetenteInput, MensagemUncheckedCreateWithoutRemetenteInput>
  }

  export type MensagemUpdateWithWhereUniqueWithoutRemetenteInput = {
    where: MensagemWhereUniqueInput
    data: XOR<MensagemUpdateWithoutRemetenteInput, MensagemUncheckedUpdateWithoutRemetenteInput>
  }

  export type MensagemUpdateManyWithWhereWithoutRemetenteInput = {
    where: MensagemScalarWhereInput
    data: XOR<MensagemUpdateManyMutationInput, MensagemUncheckedUpdateManyWithoutRemetenteInput>
  }

  export type MensagemScalarWhereInput = {
    AND?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
    OR?: MensagemScalarWhereInput[]
    NOT?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
    id?: IntFilter<"Mensagem"> | number
    conteudo?: StringFilter<"Mensagem"> | string
    remetenteId?: IntFilter<"Mensagem"> | number
    destinatarioId?: IntFilter<"Mensagem"> | number
    dataEnvio?: DateTimeFilter<"Mensagem"> | Date | string
  }

  export type MensagemUpsertWithWhereUniqueWithoutDestinatarioInput = {
    where: MensagemWhereUniqueInput
    update: XOR<MensagemUpdateWithoutDestinatarioInput, MensagemUncheckedUpdateWithoutDestinatarioInput>
    create: XOR<MensagemCreateWithoutDestinatarioInput, MensagemUncheckedCreateWithoutDestinatarioInput>
  }

  export type MensagemUpdateWithWhereUniqueWithoutDestinatarioInput = {
    where: MensagemWhereUniqueInput
    data: XOR<MensagemUpdateWithoutDestinatarioInput, MensagemUncheckedUpdateWithoutDestinatarioInput>
  }

  export type MensagemUpdateManyWithWhereWithoutDestinatarioInput = {
    where: MensagemScalarWhereInput
    data: XOR<MensagemUpdateManyMutationInput, MensagemUncheckedUpdateManyWithoutDestinatarioInput>
  }

  export type ProdutoFavoritoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ProdutoFavoritoWhereUniqueInput
    update: XOR<ProdutoFavoritoUpdateWithoutUsuarioInput, ProdutoFavoritoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ProdutoFavoritoCreateWithoutUsuarioInput, ProdutoFavoritoUncheckedCreateWithoutUsuarioInput>
  }

  export type ProdutoFavoritoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ProdutoFavoritoWhereUniqueInput
    data: XOR<ProdutoFavoritoUpdateWithoutUsuarioInput, ProdutoFavoritoUncheckedUpdateWithoutUsuarioInput>
  }

  export type ProdutoFavoritoUpdateManyWithWhereWithoutUsuarioInput = {
    where: ProdutoFavoritoScalarWhereInput
    data: XOR<ProdutoFavoritoUpdateManyMutationInput, ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ProdutoFavoritoScalarWhereInput = {
    AND?: ProdutoFavoritoScalarWhereInput | ProdutoFavoritoScalarWhereInput[]
    OR?: ProdutoFavoritoScalarWhereInput[]
    NOT?: ProdutoFavoritoScalarWhereInput | ProdutoFavoritoScalarWhereInput[]
    id?: IntFilter<"ProdutoFavorito"> | number
    usuarioId?: IntFilter<"ProdutoFavorito"> | number
    produtoId?: IntFilter<"ProdutoFavorito"> | number
  }

  export type UsuarioCreateWithoutEnderecoInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    vendedor?: VendedorCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutEnderecoInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    vendedor?: VendedorUncheckedCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemUncheckedCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemUncheckedCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutEnderecoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEnderecoInput, UsuarioUncheckedCreateWithoutEnderecoInput>
  }

  export type UsuarioUpsertWithoutEnderecoInput = {
    update: XOR<UsuarioUpdateWithoutEnderecoInput, UsuarioUncheckedUpdateWithoutEnderecoInput>
    create: XOR<UsuarioCreateWithoutEnderecoInput, UsuarioUncheckedCreateWithoutEnderecoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutEnderecoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutEnderecoInput, UsuarioUncheckedUpdateWithoutEnderecoInput>
  }

  export type UsuarioUpdateWithoutEnderecoInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    vendedor?: VendedorUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutEnderecoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    vendedor?: VendedorUncheckedUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUncheckedUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutVendedorInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutVendedorInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoUncheckedCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemUncheckedCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemUncheckedCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutVendedorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutVendedorInput, UsuarioUncheckedCreateWithoutVendedorInput>
  }

  export type ProdutoCreateWithoutVendedorInput = {
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoria: CategoriaCreateNestedOneWithoutProdutosInput
    carrinhos?: ProdutoNoCarrinhoCreateNestedManyWithoutProdutoInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutVendedorInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoriaId: number
    carrinhos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutProdutoInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutVendedorInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutVendedorInput, ProdutoUncheckedCreateWithoutVendedorInput>
  }

  export type ProdutoCreateManyVendedorInputEnvelope = {
    data: ProdutoCreateManyVendedorInput | ProdutoCreateManyVendedorInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutVendedorInput = {
    update: XOR<UsuarioUpdateWithoutVendedorInput, UsuarioUncheckedUpdateWithoutVendedorInput>
    create: XOR<UsuarioCreateWithoutVendedorInput, UsuarioUncheckedCreateWithoutVendedorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutVendedorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutVendedorInput, UsuarioUncheckedUpdateWithoutVendedorInput>
  }

  export type UsuarioUpdateWithoutVendedorInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutVendedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUncheckedUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ProdutoUpsertWithWhereUniqueWithoutVendedorInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutVendedorInput, ProdutoUncheckedUpdateWithoutVendedorInput>
    create: XOR<ProdutoCreateWithoutVendedorInput, ProdutoUncheckedCreateWithoutVendedorInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutVendedorInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutVendedorInput, ProdutoUncheckedUpdateWithoutVendedorInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutVendedorInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutVendedorInput>
  }

  export type ProdutoScalarWhereInput = {
    AND?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    OR?: ProdutoScalarWhereInput[]
    NOT?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    id?: IntFilter<"Produto"> | number
    nome?: StringFilter<"Produto"> | string
    descricao?: StringFilter<"Produto"> | string
    valor?: DecimalFilter<"Produto"> | Decimal | DecimalJsLike | number | string
    quantidade?: IntFilter<"Produto"> | number
    categoriaId?: IntFilter<"Produto"> | number
    vendedorId?: IntFilter<"Produto"> | number
  }

  export type UsuarioCreateWithoutCompradorInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCompradorInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoUncheckedCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemUncheckedCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemUncheckedCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCompradorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCompradorInput, UsuarioUncheckedCreateWithoutCompradorInput>
  }

  export type CarrinhoCreateWithoutCompradorInput = {
    precoTotal: number
    quantidade: number
    produtos?: ProdutoNoCarrinhoCreateNestedManyWithoutCarrinhoInput
    compras?: CompraCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateWithoutCompradorInput = {
    id?: number
    precoTotal: number
    quantidade: number
    produtos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput
    compras?: CompraUncheckedCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoCreateOrConnectWithoutCompradorInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutCompradorInput, CarrinhoUncheckedCreateWithoutCompradorInput>
  }

  export type CompraCreateWithoutCompradorInput = {
    dataCompra?: Date | string
    valorTotal: number
    carrinho: CarrinhoCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateWithoutCompradorInput = {
    id?: number
    carrinhoId: number
    dataCompra?: Date | string
    valorTotal: number
  }

  export type CompraCreateOrConnectWithoutCompradorInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput>
  }

  export type CompraCreateManyCompradorInputEnvelope = {
    data: CompraCreateManyCompradorInput | CompraCreateManyCompradorInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutCompradorInput = {
    update: XOR<UsuarioUpdateWithoutCompradorInput, UsuarioUncheckedUpdateWithoutCompradorInput>
    create: XOR<UsuarioCreateWithoutCompradorInput, UsuarioUncheckedCreateWithoutCompradorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCompradorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCompradorInput, UsuarioUncheckedUpdateWithoutCompradorInput>
  }

  export type UsuarioUpdateWithoutCompradorInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCompradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUncheckedUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CarrinhoUpsertWithoutCompradorInput = {
    update: XOR<CarrinhoUpdateWithoutCompradorInput, CarrinhoUncheckedUpdateWithoutCompradorInput>
    create: XOR<CarrinhoCreateWithoutCompradorInput, CarrinhoUncheckedCreateWithoutCompradorInput>
    where?: CarrinhoWhereInput
  }

  export type CarrinhoUpdateToOneWithWhereWithoutCompradorInput = {
    where?: CarrinhoWhereInput
    data: XOR<CarrinhoUpdateWithoutCompradorInput, CarrinhoUncheckedUpdateWithoutCompradorInput>
  }

  export type CarrinhoUpdateWithoutCompradorInput = {
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    produtos?: ProdutoNoCarrinhoUpdateManyWithoutCarrinhoNestedInput
    compras?: CompraUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutCompradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    produtos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput
    compras?: CompraUncheckedUpdateManyWithoutCarrinhoNestedInput
  }

  export type CompraUpsertWithWhereUniqueWithoutCompradorInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutCompradorInput, CompraUncheckedUpdateWithoutCompradorInput>
    create: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutCompradorInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutCompradorInput, CompraUncheckedUpdateWithoutCompradorInput>
  }

  export type CompraUpdateManyWithWhereWithoutCompradorInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutCompradorInput>
  }

  export type CompraScalarWhereInput = {
    AND?: CompraScalarWhereInput | CompraScalarWhereInput[]
    OR?: CompraScalarWhereInput[]
    NOT?: CompraScalarWhereInput | CompraScalarWhereInput[]
    id?: IntFilter<"Compra"> | number
    compradorId?: IntFilter<"Compra"> | number
    carrinhoId?: IntFilter<"Compra"> | number
    dataCompra?: DateTimeFilter<"Compra"> | Date | string
    valorTotal?: FloatFilter<"Compra"> | number
  }

  export type CategoriaCreateWithoutProdutosInput = {
    nome: string
  }

  export type CategoriaUncheckedCreateWithoutProdutosInput = {
    id?: number
    nome: string
  }

  export type CategoriaCreateOrConnectWithoutProdutosInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutProdutosInput, CategoriaUncheckedCreateWithoutProdutosInput>
  }

  export type VendedorCreateWithoutProdutosInput = {
    usuario: UsuarioCreateNestedOneWithoutVendedorInput
  }

  export type VendedorUncheckedCreateWithoutProdutosInput = {
    id?: number
    usuarioId: number
  }

  export type VendedorCreateOrConnectWithoutProdutosInput = {
    where: VendedorWhereUniqueInput
    create: XOR<VendedorCreateWithoutProdutosInput, VendedorUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoNoCarrinhoCreateWithoutProdutoInput = {
    quantidade: number
    carrinho: CarrinhoCreateNestedOneWithoutProdutosInput
  }

  export type ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput = {
    carrinhoId: number
    quantidade: number
  }

  export type ProdutoNoCarrinhoCreateOrConnectWithoutProdutoInput = {
    where: ProdutoNoCarrinhoWhereUniqueInput
    create: XOR<ProdutoNoCarrinhoCreateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput>
  }

  export type ProdutoNoCarrinhoCreateManyProdutoInputEnvelope = {
    data: ProdutoNoCarrinhoCreateManyProdutoInput | ProdutoNoCarrinhoCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoFavoritoCreateWithoutProdutoInput = {
    usuario: UsuarioCreateNestedOneWithoutFavoritosInput
  }

  export type ProdutoFavoritoUncheckedCreateWithoutProdutoInput = {
    id?: number
    usuarioId: number
  }

  export type ProdutoFavoritoCreateOrConnectWithoutProdutoInput = {
    where: ProdutoFavoritoWhereUniqueInput
    create: XOR<ProdutoFavoritoCreateWithoutProdutoInput, ProdutoFavoritoUncheckedCreateWithoutProdutoInput>
  }

  export type ProdutoFavoritoCreateManyProdutoInputEnvelope = {
    data: ProdutoFavoritoCreateManyProdutoInput | ProdutoFavoritoCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaUpsertWithoutProdutosInput = {
    update: XOR<CategoriaUpdateWithoutProdutosInput, CategoriaUncheckedUpdateWithoutProdutosInput>
    create: XOR<CategoriaCreateWithoutProdutosInput, CategoriaUncheckedCreateWithoutProdutosInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutProdutosInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutProdutosInput, CategoriaUncheckedUpdateWithoutProdutosInput>
  }

  export type CategoriaUpdateWithoutProdutosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type VendedorUpsertWithoutProdutosInput = {
    update: XOR<VendedorUpdateWithoutProdutosInput, VendedorUncheckedUpdateWithoutProdutosInput>
    create: XOR<VendedorCreateWithoutProdutosInput, VendedorUncheckedCreateWithoutProdutosInput>
    where?: VendedorWhereInput
  }

  export type VendedorUpdateToOneWithWhereWithoutProdutosInput = {
    where?: VendedorWhereInput
    data: XOR<VendedorUpdateWithoutProdutosInput, VendedorUncheckedUpdateWithoutProdutosInput>
  }

  export type VendedorUpdateWithoutProdutosInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutVendedorNestedInput
  }

  export type VendedorUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutProdutoInput = {
    where: ProdutoNoCarrinhoWhereUniqueInput
    update: XOR<ProdutoNoCarrinhoUpdateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedUpdateWithoutProdutoInput>
    create: XOR<ProdutoNoCarrinhoCreateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedCreateWithoutProdutoInput>
  }

  export type ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutProdutoInput = {
    where: ProdutoNoCarrinhoWhereUniqueInput
    data: XOR<ProdutoNoCarrinhoUpdateWithoutProdutoInput, ProdutoNoCarrinhoUncheckedUpdateWithoutProdutoInput>
  }

  export type ProdutoNoCarrinhoUpdateManyWithWhereWithoutProdutoInput = {
    where: ProdutoNoCarrinhoScalarWhereInput
    data: XOR<ProdutoNoCarrinhoUpdateManyMutationInput, ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoInput>
  }

  export type ProdutoNoCarrinhoScalarWhereInput = {
    AND?: ProdutoNoCarrinhoScalarWhereInput | ProdutoNoCarrinhoScalarWhereInput[]
    OR?: ProdutoNoCarrinhoScalarWhereInput[]
    NOT?: ProdutoNoCarrinhoScalarWhereInput | ProdutoNoCarrinhoScalarWhereInput[]
    carrinhoId?: IntFilter<"ProdutoNoCarrinho"> | number
    produtoId?: IntFilter<"ProdutoNoCarrinho"> | number
    quantidade?: IntFilter<"ProdutoNoCarrinho"> | number
  }

  export type ProdutoFavoritoUpsertWithWhereUniqueWithoutProdutoInput = {
    where: ProdutoFavoritoWhereUniqueInput
    update: XOR<ProdutoFavoritoUpdateWithoutProdutoInput, ProdutoFavoritoUncheckedUpdateWithoutProdutoInput>
    create: XOR<ProdutoFavoritoCreateWithoutProdutoInput, ProdutoFavoritoUncheckedCreateWithoutProdutoInput>
  }

  export type ProdutoFavoritoUpdateWithWhereUniqueWithoutProdutoInput = {
    where: ProdutoFavoritoWhereUniqueInput
    data: XOR<ProdutoFavoritoUpdateWithoutProdutoInput, ProdutoFavoritoUncheckedUpdateWithoutProdutoInput>
  }

  export type ProdutoFavoritoUpdateManyWithWhereWithoutProdutoInput = {
    where: ProdutoFavoritoScalarWhereInput
    data: XOR<ProdutoFavoritoUpdateManyMutationInput, ProdutoFavoritoUncheckedUpdateManyWithoutProdutoInput>
  }

  export type ProdutoCreateWithoutCategoriaInput = {
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    vendedor: VendedorCreateNestedOneWithoutProdutosInput
    carrinhos?: ProdutoNoCarrinhoCreateNestedManyWithoutProdutoInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutCategoriaInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    vendedorId: number
    carrinhos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutProdutoInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutCategoriaInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput>
  }

  export type ProdutoCreateManyCategoriaInputEnvelope = {
    data: ProdutoCreateManyCategoriaInput | ProdutoCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutCategoriaInput, ProdutoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<ProdutoCreateWithoutCategoriaInput, ProdutoUncheckedCreateWithoutCategoriaInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutCategoriaInput, ProdutoUncheckedUpdateWithoutCategoriaInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutCategoriaInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type CompradorCreateWithoutCarrinhoInput = {
    usuario: UsuarioCreateNestedOneWithoutCompradorInput
    compras?: CompraCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUncheckedCreateWithoutCarrinhoInput = {
    id?: number
    usuarioId: number
    compras?: CompraUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type CompradorCreateOrConnectWithoutCarrinhoInput = {
    where: CompradorWhereUniqueInput
    create: XOR<CompradorCreateWithoutCarrinhoInput, CompradorUncheckedCreateWithoutCarrinhoInput>
  }

  export type ProdutoNoCarrinhoCreateWithoutCarrinhoInput = {
    quantidade: number
    produto: ProdutoCreateNestedOneWithoutCarrinhosInput
  }

  export type ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput = {
    produtoId: number
    quantidade: number
  }

  export type ProdutoNoCarrinhoCreateOrConnectWithoutCarrinhoInput = {
    where: ProdutoNoCarrinhoWhereUniqueInput
    create: XOR<ProdutoNoCarrinhoCreateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput>
  }

  export type ProdutoNoCarrinhoCreateManyCarrinhoInputEnvelope = {
    data: ProdutoNoCarrinhoCreateManyCarrinhoInput | ProdutoNoCarrinhoCreateManyCarrinhoInput[]
    skipDuplicates?: boolean
  }

  export type CompraCreateWithoutCarrinhoInput = {
    dataCompra?: Date | string
    valorTotal: number
    comprador: CompradorCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateWithoutCarrinhoInput = {
    id?: number
    compradorId: number
    dataCompra?: Date | string
    valorTotal: number
  }

  export type CompraCreateOrConnectWithoutCarrinhoInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutCarrinhoInput, CompraUncheckedCreateWithoutCarrinhoInput>
  }

  export type CompraCreateManyCarrinhoInputEnvelope = {
    data: CompraCreateManyCarrinhoInput | CompraCreateManyCarrinhoInput[]
    skipDuplicates?: boolean
  }

  export type CompradorUpsertWithoutCarrinhoInput = {
    update: XOR<CompradorUpdateWithoutCarrinhoInput, CompradorUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<CompradorCreateWithoutCarrinhoInput, CompradorUncheckedCreateWithoutCarrinhoInput>
    where?: CompradorWhereInput
  }

  export type CompradorUpdateToOneWithWhereWithoutCarrinhoInput = {
    where?: CompradorWhereInput
    data: XOR<CompradorUpdateWithoutCarrinhoInput, CompradorUncheckedUpdateWithoutCarrinhoInput>
  }

  export type CompradorUpdateWithoutCarrinhoInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutCompradorNestedInput
    compras?: CompraUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    compras?: CompraUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type ProdutoNoCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput = {
    where: ProdutoNoCarrinhoWhereUniqueInput
    update: XOR<ProdutoNoCarrinhoUpdateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<ProdutoNoCarrinhoCreateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedCreateWithoutCarrinhoInput>
  }

  export type ProdutoNoCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput = {
    where: ProdutoNoCarrinhoWhereUniqueInput
    data: XOR<ProdutoNoCarrinhoUpdateWithoutCarrinhoInput, ProdutoNoCarrinhoUncheckedUpdateWithoutCarrinhoInput>
  }

  export type ProdutoNoCarrinhoUpdateManyWithWhereWithoutCarrinhoInput = {
    where: ProdutoNoCarrinhoScalarWhereInput
    data: XOR<ProdutoNoCarrinhoUpdateManyMutationInput, ProdutoNoCarrinhoUncheckedUpdateManyWithoutCarrinhoInput>
  }

  export type CompraUpsertWithWhereUniqueWithoutCarrinhoInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutCarrinhoInput, CompraUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<CompraCreateWithoutCarrinhoInput, CompraUncheckedCreateWithoutCarrinhoInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutCarrinhoInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutCarrinhoInput, CompraUncheckedUpdateWithoutCarrinhoInput>
  }

  export type CompraUpdateManyWithWhereWithoutCarrinhoInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutCarrinhoInput>
  }

  export type CarrinhoCreateWithoutProdutosInput = {
    precoTotal: number
    quantidade: number
    comprador: CompradorCreateNestedOneWithoutCarrinhoInput
    compras?: CompraCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateWithoutProdutosInput = {
    id?: number
    compradorId: number
    precoTotal: number
    quantidade: number
    compras?: CompraUncheckedCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoCreateOrConnectWithoutProdutosInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoCreateWithoutCarrinhosInput = {
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoria: CategoriaCreateNestedOneWithoutProdutosInput
    vendedor: VendedorCreateNestedOneWithoutProdutosInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutCarrinhosInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoriaId: number
    vendedorId: number
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutCarrinhosInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutCarrinhosInput, ProdutoUncheckedCreateWithoutCarrinhosInput>
  }

  export type CarrinhoUpsertWithoutProdutosInput = {
    update: XOR<CarrinhoUpdateWithoutProdutosInput, CarrinhoUncheckedUpdateWithoutProdutosInput>
    create: XOR<CarrinhoCreateWithoutProdutosInput, CarrinhoUncheckedCreateWithoutProdutosInput>
    where?: CarrinhoWhereInput
  }

  export type CarrinhoUpdateToOneWithWhereWithoutProdutosInput = {
    where?: CarrinhoWhereInput
    data: XOR<CarrinhoUpdateWithoutProdutosInput, CarrinhoUncheckedUpdateWithoutProdutosInput>
  }

  export type CarrinhoUpdateWithoutProdutosInput = {
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneRequiredWithoutCarrinhoNestedInput
    compras?: CompraUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    compras?: CompraUncheckedUpdateManyWithoutCarrinhoNestedInput
  }

  export type ProdutoUpsertWithoutCarrinhosInput = {
    update: XOR<ProdutoUpdateWithoutCarrinhosInput, ProdutoUncheckedUpdateWithoutCarrinhosInput>
    create: XOR<ProdutoCreateWithoutCarrinhosInput, ProdutoUncheckedCreateWithoutCarrinhosInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutCarrinhosInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutCarrinhosInput, ProdutoUncheckedUpdateWithoutCarrinhosInput>
  }

  export type ProdutoUpdateWithoutCarrinhosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutProdutosNestedInput
    vendedor?: VendedorUpdateOneRequiredWithoutProdutosNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutCarrinhosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    vendedorId?: IntFieldUpdateOperationsInput | number
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type CompradorCreateWithoutComprasInput = {
    usuario: UsuarioCreateNestedOneWithoutCompradorInput
    carrinho?: CarrinhoCreateNestedOneWithoutCompradorInput
  }

  export type CompradorUncheckedCreateWithoutComprasInput = {
    id?: number
    usuarioId: number
    carrinho?: CarrinhoUncheckedCreateNestedOneWithoutCompradorInput
  }

  export type CompradorCreateOrConnectWithoutComprasInput = {
    where: CompradorWhereUniqueInput
    create: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
  }

  export type CarrinhoCreateWithoutComprasInput = {
    precoTotal: number
    quantidade: number
    comprador: CompradorCreateNestedOneWithoutCarrinhoInput
    produtos?: ProdutoNoCarrinhoCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateWithoutComprasInput = {
    id?: number
    compradorId: number
    precoTotal: number
    quantidade: number
    produtos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoCreateOrConnectWithoutComprasInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutComprasInput, CarrinhoUncheckedCreateWithoutComprasInput>
  }

  export type CompradorUpsertWithoutComprasInput = {
    update: XOR<CompradorUpdateWithoutComprasInput, CompradorUncheckedUpdateWithoutComprasInput>
    create: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
    where?: CompradorWhereInput
  }

  export type CompradorUpdateToOneWithWhereWithoutComprasInput = {
    where?: CompradorWhereInput
    data: XOR<CompradorUpdateWithoutComprasInput, CompradorUncheckedUpdateWithoutComprasInput>
  }

  export type CompradorUpdateWithoutComprasInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutCompradorNestedInput
    carrinho?: CarrinhoUpdateOneWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUncheckedUpdateOneWithoutCompradorNestedInput
  }

  export type CarrinhoUpsertWithoutComprasInput = {
    update: XOR<CarrinhoUpdateWithoutComprasInput, CarrinhoUncheckedUpdateWithoutComprasInput>
    create: XOR<CarrinhoCreateWithoutComprasInput, CarrinhoUncheckedCreateWithoutComprasInput>
    where?: CarrinhoWhereInput
  }

  export type CarrinhoUpdateToOneWithWhereWithoutComprasInput = {
    where?: CarrinhoWhereInput
    data: XOR<CarrinhoUpdateWithoutComprasInput, CarrinhoUncheckedUpdateWithoutComprasInput>
  }

  export type CarrinhoUpdateWithoutComprasInput = {
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneRequiredWithoutCarrinhoNestedInput
    produtos?: ProdutoNoCarrinhoUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    precoTotal?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    produtos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput
  }

  export type UsuarioCreateWithoutMensagensEnviadasInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorCreateNestedOneWithoutUsuarioInput
    mensagensRecebidas?: MensagemCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutMensagensEnviadasInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoUncheckedCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorUncheckedCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensRecebidas?: MensagemUncheckedCreateNestedManyWithoutDestinatarioInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutMensagensEnviadasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutMensagensEnviadasInput, UsuarioUncheckedCreateWithoutMensagensEnviadasInput>
  }

  export type UsuarioCreateWithoutMensagensRecebidasInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemCreateNestedManyWithoutRemetenteInput
    favoritos?: ProdutoFavoritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutMensagensRecebidasInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoUncheckedCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorUncheckedCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemUncheckedCreateNestedManyWithoutRemetenteInput
    favoritos?: ProdutoFavoritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutMensagensRecebidasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutMensagensRecebidasInput, UsuarioUncheckedCreateWithoutMensagensRecebidasInput>
  }

  export type UsuarioUpsertWithoutMensagensEnviadasInput = {
    update: XOR<UsuarioUpdateWithoutMensagensEnviadasInput, UsuarioUncheckedUpdateWithoutMensagensEnviadasInput>
    create: XOR<UsuarioCreateWithoutMensagensEnviadasInput, UsuarioUncheckedCreateWithoutMensagensEnviadasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutMensagensEnviadasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutMensagensEnviadasInput, UsuarioUncheckedUpdateWithoutMensagensEnviadasInput>
  }

  export type UsuarioUpdateWithoutMensagensEnviadasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUpdateOneWithoutUsuarioNestedInput
    mensagensRecebidas?: MensagemUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutMensagensEnviadasInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUncheckedUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensRecebidas?: MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUpsertWithoutMensagensRecebidasInput = {
    update: XOR<UsuarioUpdateWithoutMensagensRecebidasInput, UsuarioUncheckedUpdateWithoutMensagensRecebidasInput>
    create: XOR<UsuarioCreateWithoutMensagensRecebidasInput, UsuarioUncheckedCreateWithoutMensagensRecebidasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutMensagensRecebidasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutMensagensRecebidasInput, UsuarioUncheckedUpdateWithoutMensagensRecebidasInput>
  }

  export type UsuarioUpdateWithoutMensagensRecebidasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUpdateManyWithoutRemetenteNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutMensagensRecebidasInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUncheckedUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUncheckedUpdateManyWithoutRemetenteNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutFavoritosInput = {
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemCreateNestedManyWithoutDestinatarioInput
  }

  export type UsuarioUncheckedCreateWithoutFavoritosInput = {
    id?: number
    cpf: string
    primeiroNome: string
    sobrenome: string
    email: string
    senha: string
    telefone?: string | null
    imagemPerfil?: string | null
    endereco?: EnderecoUncheckedCreateNestedOneWithoutUsuarioInput
    vendedor?: VendedorUncheckedCreateNestedOneWithoutUsuarioInput
    comprador?: CompradorUncheckedCreateNestedOneWithoutUsuarioInput
    mensagensEnviadas?: MensagemUncheckedCreateNestedManyWithoutRemetenteInput
    mensagensRecebidas?: MensagemUncheckedCreateNestedManyWithoutDestinatarioInput
  }

  export type UsuarioCreateOrConnectWithoutFavoritosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutFavoritosInput, UsuarioUncheckedCreateWithoutFavoritosInput>
  }

  export type ProdutoCreateWithoutFavoritosInput = {
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoria: CategoriaCreateNestedOneWithoutProdutosInput
    vendedor: VendedorCreateNestedOneWithoutProdutosInput
    carrinhos?: ProdutoNoCarrinhoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateWithoutFavoritosInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoriaId: number
    vendedorId: number
    carrinhos?: ProdutoNoCarrinhoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoCreateOrConnectWithoutFavoritosInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutFavoritosInput, ProdutoUncheckedCreateWithoutFavoritosInput>
  }

  export type UsuarioUpsertWithoutFavoritosInput = {
    update: XOR<UsuarioUpdateWithoutFavoritosInput, UsuarioUncheckedUpdateWithoutFavoritosInput>
    create: XOR<UsuarioCreateWithoutFavoritosInput, UsuarioUncheckedCreateWithoutFavoritosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutFavoritosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutFavoritosInput, UsuarioUncheckedUpdateWithoutFavoritosInput>
  }

  export type UsuarioUpdateWithoutFavoritosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUpdateManyWithoutDestinatarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutFavoritosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    primeiroNome?: StringFieldUpdateOperationsInput | string
    sobrenome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    imagemPerfil?: NullableStringFieldUpdateOperationsInput | string | null
    endereco?: EnderecoUncheckedUpdateOneWithoutUsuarioNestedInput
    vendedor?: VendedorUncheckedUpdateOneWithoutUsuarioNestedInput
    comprador?: CompradorUncheckedUpdateOneWithoutUsuarioNestedInput
    mensagensEnviadas?: MensagemUncheckedUpdateManyWithoutRemetenteNestedInput
    mensagensRecebidas?: MensagemUncheckedUpdateManyWithoutDestinatarioNestedInput
  }

  export type ProdutoUpsertWithoutFavoritosInput = {
    update: XOR<ProdutoUpdateWithoutFavoritosInput, ProdutoUncheckedUpdateWithoutFavoritosInput>
    create: XOR<ProdutoCreateWithoutFavoritosInput, ProdutoUncheckedCreateWithoutFavoritosInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutFavoritosInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutFavoritosInput, ProdutoUncheckedUpdateWithoutFavoritosInput>
  }

  export type ProdutoUpdateWithoutFavoritosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutProdutosNestedInput
    vendedor?: VendedorUpdateOneRequiredWithoutProdutosNestedInput
    carrinhos?: ProdutoNoCarrinhoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutFavoritosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    vendedorId?: IntFieldUpdateOperationsInput | number
    carrinhos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type MensagemCreateManyRemetenteInput = {
    id?: number
    conteudo: string
    destinatarioId: number
    dataEnvio?: Date | string
  }

  export type MensagemCreateManyDestinatarioInput = {
    id?: number
    conteudo: string
    remetenteId: number
    dataEnvio?: Date | string
  }

  export type ProdutoFavoritoCreateManyUsuarioInput = {
    id?: number
    produtoId: number
  }

  export type MensagemUpdateWithoutRemetenteInput = {
    conteudo?: StringFieldUpdateOperationsInput | string
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
    destinatario?: UsuarioUpdateOneRequiredWithoutMensagensRecebidasNestedInput
  }

  export type MensagemUncheckedUpdateWithoutRemetenteInput = {
    id?: IntFieldUpdateOperationsInput | number
    conteudo?: StringFieldUpdateOperationsInput | string
    destinatarioId?: IntFieldUpdateOperationsInput | number
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemUncheckedUpdateManyWithoutRemetenteInput = {
    id?: IntFieldUpdateOperationsInput | number
    conteudo?: StringFieldUpdateOperationsInput | string
    destinatarioId?: IntFieldUpdateOperationsInput | number
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemUpdateWithoutDestinatarioInput = {
    conteudo?: StringFieldUpdateOperationsInput | string
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
    remetente?: UsuarioUpdateOneRequiredWithoutMensagensEnviadasNestedInput
  }

  export type MensagemUncheckedUpdateWithoutDestinatarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    conteudo?: StringFieldUpdateOperationsInput | string
    remetenteId?: IntFieldUpdateOperationsInput | number
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemUncheckedUpdateManyWithoutDestinatarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    conteudo?: StringFieldUpdateOperationsInput | string
    remetenteId?: IntFieldUpdateOperationsInput | number
    dataEnvio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProdutoFavoritoUpdateWithoutUsuarioInput = {
    produto?: ProdutoUpdateOneRequiredWithoutFavoritosNestedInput
  }

  export type ProdutoFavoritoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoFavoritoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateManyVendedorInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    categoriaId: number
  }

  export type ProdutoUpdateWithoutVendedorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutProdutosNestedInput
    carrinhos?: ProdutoNoCarrinhoUpdateManyWithoutProdutoNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutVendedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    carrinhos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateManyWithoutVendedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type CompraCreateManyCompradorInput = {
    id?: number
    carrinhoId: number
    dataCompra?: Date | string
    valorTotal: number
  }

  export type CompraUpdateWithoutCompradorInput = {
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateWithoutCompradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CompraUncheckedUpdateManyWithoutCompradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoCreateManyProdutoInput = {
    carrinhoId: number
    quantidade: number
  }

  export type ProdutoFavoritoCreateManyProdutoInput = {
    id?: number
    usuarioId: number
  }

  export type ProdutoNoCarrinhoUpdateWithoutProdutoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type ProdutoNoCarrinhoUncheckedUpdateWithoutProdutoInput = {
    carrinhoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoInput = {
    carrinhoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoFavoritoUpdateWithoutProdutoInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutFavoritosNestedInput
  }

  export type ProdutoFavoritoUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoFavoritoUncheckedUpdateManyWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCreateManyCategoriaInput = {
    id?: number
    nome: string
    descricao: string
    valor: Decimal | DecimalJsLike | number | string
    quantidade: number
    vendedorId: number
  }

  export type ProdutoUpdateWithoutCategoriaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    vendedor?: VendedorUpdateOneRequiredWithoutProdutosNestedInput
    carrinhos?: ProdutoNoCarrinhoUpdateManyWithoutProdutoNestedInput
    favoritos?: ProdutoFavoritoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    vendedorId?: IntFieldUpdateOperationsInput | number
    carrinhos?: ProdutoNoCarrinhoUncheckedUpdateManyWithoutProdutoNestedInput
    favoritos?: ProdutoFavoritoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    vendedorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoCreateManyCarrinhoInput = {
    produtoId: number
    quantidade: number
  }

  export type CompraCreateManyCarrinhoInput = {
    id?: number
    compradorId: number
    dataCompra?: Date | string
    valorTotal: number
  }

  export type ProdutoNoCarrinhoUpdateWithoutCarrinhoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    produto?: ProdutoUpdateOneRequiredWithoutCarrinhosNestedInput
  }

  export type ProdutoNoCarrinhoUncheckedUpdateWithoutCarrinhoInput = {
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoNoCarrinhoUncheckedUpdateManyWithoutCarrinhoInput = {
    produtoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type CompraUpdateWithoutCarrinhoInput = {
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }

  export type CompraUncheckedUpdateManyWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    dataCompra?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendedorCountOutputTypeDefaultArgs instead
     */
    export type VendedorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendedorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompradorCountOutputTypeDefaultArgs instead
     */
    export type CompradorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompradorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoCountOutputTypeDefaultArgs instead
     */
    export type ProdutoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarrinhoCountOutputTypeDefaultArgs instead
     */
    export type CarrinhoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarrinhoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnderecoDefaultArgs instead
     */
    export type EnderecoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnderecoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendedorDefaultArgs instead
     */
    export type VendedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendedorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompradorDefaultArgs instead
     */
    export type CompradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompradorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoDefaultArgs instead
     */
    export type ProdutoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaDefaultArgs instead
     */
    export type CategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarrinhoDefaultArgs instead
     */
    export type CarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarrinhoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoNoCarrinhoDefaultArgs instead
     */
    export type ProdutoNoCarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoNoCarrinhoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompraDefaultArgs instead
     */
    export type CompraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MensagemDefaultArgs instead
     */
    export type MensagemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MensagemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoFavoritoDefaultArgs instead
     */
    export type ProdutoFavoritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoFavoritoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}